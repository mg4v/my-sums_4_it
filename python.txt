----------
УСТАНОВКА:
----------
https://www.python.org/ --> DOWNLLOADS (3v)
запускаем:
 - Add Python to PATH
 - Install Now

---------------------------------------------
ПРОВЕРКА ВЕРСИИ, ЗАПУСК, ВЫПОЛНЕНИЕ ПРОГРАММ:
---------------------------------------------

** Проверка версии:
python3 --version

** Запуск python в консоли:
python3

** Выход из python:
exit()

** Файлы в python имеют расширения ".py".

** запуск файла с программой через оболочку python:
python3 <имя_файла>.py

-----------------------------
УСТАНОВКА JAVA SDK И PyCHARM:
-----------------------------

Java SDK скачиваем с сайта Oracle:
----------------------------------
Java SE Downloads --> Java Platform (JDK) -->
--> Accept --> 64x

Установка проходит с параметрами по умочанию.
На windows после установки необходимо в системных переменных среды
прописать путь до лиректории куда установилась JDK: JAVA_HOME!!!
Так же можно добавить путь в системную переменную "Path".


Установка PyCharm:
------------------
Сайт https://www.jetbrains.com/pycharm
 - Communty - Download
 - 64-bit launcher
 - Create associations: .py
 
 При первом запуске может спросить требуется ли импортировать настройки из предыдущих версий
 PyCharm если таковые были установлены.
 Можно, так же, выбрать тему и редактор по умолчанию.
 
 
-----------------
РАБОТА В PYCHARM:
-----------------
 
** Создание проекта:
[Creat New Project]
  Выбираем Location - место установки и
    Interpreter - путь до компилятора Python (версия установленного python).
     
** Создать файл:
[ПКМ] на проекте --> "New->Python file"
  Name: имя файла
  Interpreter: путь до комплилятора (установленного в системе python) - внимание на версию.
      
** Запуск, отладка, проверка написанного кода:
"Меню->Run"
Run = [ALT+SHIFT+F10]

** Включить панель инструментов с бытрыми функциями:
"View->Toolbar"


----------
СИНТАКСИС:
----------
# парные кавычки не смешиваются
'' или "", или '""' или "''"

# Перенос не допустим, но если нужен для удобства или требуется смешать кавычки в тексте,
## то заключаем весь текст (строку) в
'''текст'''

# Все арифметические действия (+-*/) выполняются в математическом порядке, если нужно изменить -
## ставим скобки, как это делается в арифметике.

# Можно умножать не только числа но и строки:
print(10 * 'a')

>>> aaaaaaaaaa

# Обьявление переменной:
имя_переменной = значение_переменной

# Вывести на экран текст или значение переменной:
print(что_вывести)
print('текст')
print(имя_переменной)

-----------
БЛОКИ КОДА:
-----------
Строки кода, стоящие в одной позиции (то есть с одинаковым отступом слева),
 группируются в блок, и каждый раз, когда вы начинаете строку с большего количества пробелов,
 чем у предыдущей, вы создаете новый блок, являющийся частью предыдущего.


------------
ТИПЫ ДАННЫХ:
------------

# Тип число:
-------------
var_name = 1

# число с плавающей точкой (десятичная дробь):
10.2

# Тип строка:
-------------
var_name = 'текст'
# или:
var_name = "текст"

# В строке можно указать место где будет отображаться значение переменной при
var_1 = какое-то_значение
var_2 = 'начало текста %s продолжение_текста'
print(var_2 % var_1)

>>>>начало текста какое-то_значение продолжение_текста

# Если подставляемых в текст переменных несколько:
var_1 = какое-то_значение
var_2 = еще_одно_значение
var_3 = 'начало текста %s продолжение_текста %s еще_продолжение текста'
print(var_2 % (var_1, var_2))

>>>> начало текста какое-то_значение продолжение_текста еще_одно_значение еще_продолжение текста

# Тип список:
-------------
list_name = ['значение_1', 'значение_2', 'значение_3', ...'значение_n']

# В списках можно хранить значения разных типов, например числа:
some_numbers = [1, 2, 5, 10, 20]

## Или строки:
some_strings = ['Нож', 'отточен', 'точен', 'очень']

## Или числа и строки вперемежку:
numbers_and_strings = [7, 'раз', 'отпей', 1, 'раз', 'отъешь']

## В списках могут даже храниться другие списки:
numbers = [1, 2, 3, 4, 5]
strings = ['хватит', 'циферки', 'считать']
mylist = [numbers, strings]

# Нумерация элементов списка начинается с 3:
['0', '1', '2', ..., n]

# Вызвать значение_3 из списка:
print(list_name[2])

>>>>> значение_3

# Изменить значение элемента списка:
list_name[2] = 'значение_3.0'
print(list_name)

>>>>> ['значение_1', 'значение_2', 'значение_3.0', ...'значение_n']

# Вывести часть элементов:
print(list_nameх[2:5]) 

##   Запись [2:5] означает «показать элементы, начиная с индекса 2 и до индекса 5 (но не включая его)», иначе говоря, элементы 2, 3 и 4.

# добавить элемент в конец списка

имя_списка.append('новый_элемент')

# Удаление элемента из списка:
del имя_списка[номер_элемента]

# Объединить списки:
list1 = [1, 2, 3, 4]
list2 = ['я', 'мечтаю', 'о', 'пломбире']
print(list1 + list2)

>>>>> [1, 2, 3, 4, 5, 'я', 'забрался', 'под', 'кровать']

list3 = list1 + list2 
print(list3)

>>>>> [1, 2, 3, 4, 5, 'я', 'забрался', 'под', 'кровать']


# Также можно умножить список на число с помощью оператора (*).
## Например, умножим list1 на 5:
list1 = [1, 2]
print(list1 * 5)

>>>>> [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]

## Фактически это означает «повторить list1 пять раз», поэтому в итоге получается
### 1, 2, 1, 2, 1, 2, 1, 2, 1, 2.
## Но обратите внимание — деление и вычитание со списками не ра- ботают!!!
## Также не выйдет сложить список с несписковым значением!!!

Тип Кортеж:
-----------
Главное отличие кортежа от списка в том, что кортеж невозможно изменить после его создания.

# Задать кортеж и вывести значение его 4-го элемента на экран:
fibs = (0, 1, 1, 2, 3)
print(fibs[3])

>>>>> 2

Тип Словарь:
------------

Словарями в Python называются наборы значений аналогично спискам и кортежам. Отличие состоит в том, что каждому элементу словаря соответствуют ключ и связанное с ним значение.

# Задать словарь:
имя_словаря = { 'ключ_0': 'значение_0, 'ключ_1': 'значение_1, ..., 'ключ_n': 'значение_n}

# Получить значение ключа по словарю:
 print(имя_словаря['ключ_n'])

>>>>> значение_n

# Удалить ключ-значение:
del имя_словаря['ключ_n']

# Изменить значение ключа в словаре:
имя_словаря['ключ_n'] = 'новое_значение_n'

Объединять словари с помощью оператора "+" нельзя!!!

Переменные без значения — None:
-------------------------------
Можно не только сохранить в переменной число, строку
 или список, но и назначить переменной пустое значение.
Присвоить переменной значение None значит сказать,
 что в ней больше ничего не содержится
 (что эта переменная не связана с каким- либо значением).
 Еще это способ определить переменную, не указывая ее значение. 

#
var_name = None

----------------------
ПОЛЬЗОВАТЕЛЬСКИЙ ВВОД:
----------------------
Пользовательским вводом называют данные, которые пользователь вводит с клавиатуры,
 будь то буква, цифра, нажатие клавиши Enter или что- то еще.
Пользовательский ввод попадает в Python в виде строки,
 а значит, если вы напечатаете на клавиатуре 10,
 Python сохранит эту информацию в переменной как строку, а не как число.

Чем строка '10' отличается от числа 10?
Оба значения выглядят одинаково, разница лишь в том,
 что одно из них в кавычках.
Однако для компьютера это разные вещи.

# сделать из строки '10' число может функция int

переменная_строка = 'текст'
переменная_для_преобразования = int(переменная_строка)

# для преобразования числа в строку служит функция str
 (не работает с числами с плавающей точкой):

переменная_число = 10
переменная_для_преобразования = str(переменная_число)

!!! Если в преобразуемой строке нет цифр - Python выдаст ошибку:
 ValueError: invalid literal for int() with base

# для преобразования дробного числа в строку служит функция float:
переменная_дробное_число = 10
переменная_для_преобразования = float(переменная_дробное_число)


-------------------------------
УСЛОВНАЯ КОНСТРУКЦИЯ IF (ЕСЛИ):
-------------------------------

Условие — это программная конструкция, которая что-то с чем-то срав-нивает,
 сообщая, является ли заданное соотношение Истиной (True) или Ложью (False).

Например, выражение age > 10 — это условие, которое как бы задает вопрос: значение переменной age больше, чем 10?

#
if условие:
    действие_если_условие_истинно

## Операторы условий:

  == Равно
  != Не равно
  >  Больше
  <  Меньше
  >= Больше или равно
  <= Меньше или равно

Конструкция if-then-else:
-------------------------
Если условие дает Истину, сделай это, иначе сделай то.

#
if условие:
    действие_если_условие_истинно
else:
    действие_если_условие_НЕ_истинно

Команды if и elif:
------------------
#
if условие:
    действие_если_условие_истинно
elif:
    условие_еще_если
else:
    действие_если_условие_НЕ_истинно

Объединение условий:
--------------------

Несколько условий можно объединить в одно с помощью ключевых слов
  and (что означает «и») и or (что означает «или»). 


---------
ЦИКЛ FOR:

Выполняет для каждого элемента определенные действия.

# Пример:
for x in range(0, 5):
    print('привет')

-----------
ЦИКЛ WHILE:

Цикл пока - выполняет действие пока условие соблюдается.

!!! Сначала выполняет действие, потом перед следующей итерацией проверяет условие!!!

# Пример - подниматься в гору на 99999 шагов, если не устал и не плохая погода:

```
step = 0
tired = False
badweather = False

while step < 10000:
    print(step)
    if tired == True:
        break
     elif badweather == True:
        break
     else:
        step = step + 1
```

--------
ФУНКЦИИ:
--------

Функция — это фрагмент кода, который выполняет какую-то задачу.

Кроме того, это один из способов повторного использования кода,
  ведь одну и ту же функцию можно вызывать в своих программах снова и снова.

Строение функции:
-----------------
Функция состоит из трех частей:
 имени, аргументов и тела.

# Вот пример простой функции:

def testfunc(myname):
    print('Привет, %s' % myname)

Имя этой функции — testfunc.
У нее есть единственный аргумент — myname,
 а ее тело — это блок кода, идущий сразу после строки,
 которая начинается с def (сокращение от define — определить).
Аргумент — это специальная переменная, которая существует, только пока функция выполняется.

Функцию testfunc можно запустить
 (или, как говорят программисты, вызвать),
указав ее имя, а после него, в скобках, значение аргумента:

#
testfunc('Мэри')

>>>>> Привет, Мэри

# При вызове функции значения аргументов следует писать через запятую:

def testfunc(fname, lname):
    print('Привет, %s %s' % (fname, lname))

testfunc('Мэри', 'Смит')

>>>>> Привет, Мэри Смит

# В качестве аргументов можно указывать переменные (которые перед этим нужно создать):

firstname = 'Джо'
lastname = 'Робертсон'
testfunc(firstname, lastname)

>>>>> Привет, Джо Робертсон

# Зачастую из функции полезно вернуть какое-то значение. Это делает- ся с помощью команды return.

def savings(pocket_money, paper_route, spending):
    return pocket_money + paper_route – spending

# Команда return возвращает результат вычислений в ту часть кода,
 откуда функция была вызвана,
 и его можно сохранить в переменной (обычным способом, с помощью знака "=")
 либо вывести на экран:

print(savings(10, 10, 5))

>>>>> 15

Переменные и область видимости:
-------------------------------

Переменные, созданные в теле функции,
 нельзя использовать после того, как эта функция завершит работу,
 поскольку они существуют только во время ее выполнения.
 В таких случаях программисты говорят, что область видимости переменных ограничена функцией.

# Пример:

```
def variable_test():
    first_variable = 10
    second_variable = 20
    return first_variable * second_variable

print(variable_test())

>>>>> 200

print(first_variable)

>>>>>
Traceback (most recent call last):
  File "<pyshell#50>", line 1, in <module>
    print(first_variable)
NameError: name 'first_variable' is not defined
```

-----
LIST:

Функция Python list() принимает любую итерацию
 (объект, который можно перебирать) в качестве параметра и возвращает список.

# Синтаксис:
list(iterable)

где iterable это объект, который может быть последовательностью
 (строка, кортежи) или коллекцией (множество, словарь)
 или любым объектом-итератором.

!!! Если мы не передадим ни одного параметра, функция list() вернет пустой список.

------
RANGE:

Функция range() возвращает объект, создающий последовательность чисел,
 начинающуюся с 0 (по умолчанию), последовательно увеличивающуюся
 (по умолчанию на 1) и останавливающуюся перед заданным числом (обязательный параметр).

# Пример - список с 1 по 4 включительно:
range(1, 5)

!!! Обратите внимание, что range() возвращает не последовательность, а объект, вызывающий её!!!

# Пример - создать список из генерируемой функцией range последовательности:
list(range(4)) # [0, 1, 2, 3]

--------
МОДУЛИ:
--------

Модулем называется способ подключения полезного кода к другой программе,
 и в числе прочего модули обычно содержат функции, к которым можно обращаться.

Иными словами - модули нужны для группировки функций,
 переменных и других фрагментов Python-кода.

Одни модули идут в комплекте с Python, а другие нужно скачивать из интернета.

# Добавить модуль в программу:
import имя_модуля

Импортирование модуля сообщает Python о том, что мы собираемся этот модуль использовать.

-------
TURTLE:

С помощью модуля turtle можно программировать векторную графику,
  то есть составлять рисунки из линий, точек и кривых.

#
import turtle

!!!
Если вы пользуетесь Ubuntu и, попытавшись импортировать модуль turtle, получили ошибку, скорее всего, вам нужно установить пакет tkinter. Для этого откройте центр приложений Ubuntu и введите в строке поиска python-tk. В списке должен появиться пункт «Tkinter — Writing Tk Applications with Python». Кликните Install, чтобы установить этот пакет.
!!!

# Создать холст с помощью функции pen (передав ее в качестве значения переменной):
имя_переменной = turtle.Pen()

## Стрелочка в центре холста и есть черепашка.

# Сделать вместо стрелочки черепашку:
turtle.shape("turtle")

# Переместить черепашку вперед:
имя_переменной.forward(число_пикселей)

# Повернуть черепашку влево:
имя_переменной.left(число_градусов)

## Eще есть:
 - вправо: имя_переменной.right(число_пикселей);
 - назад: имя_переменной.backward(число_пикселей);
 - вверх (убрать перо с холста - черепашка не оставляет следов): имя_переменной.up();
 - вниз (вернуть перо на холст): имя_переменной.down();

# Очистить экран и вернуть чреепашку в центр:
имя_переменной.reset()

# Очистить экран (черепашка останется на прежнем месте):
имя_переменной.clear()

--------
tkinter:

Помогает создавать игры.

-------
PyGAME:

Помогает создавать игры.

----
PIL:

Для работы с изображениями.

--------
Panda3D:

Для трехмерной графики.

-----
time:

Для расчета текущей даты и времени.

#
import time
print(time.asctime())

>>>>> 'Mon Nov 5 12:40:27 2016'

----
sys:

Содержит инструменты для взаимодействия с интерпретатором Python.

# Пример использования:

```
import sys

def silly_age_joke():
    print('Сколько вам лет?')
    age = int(sys.stdin.readline())
    if age >= 10 and age <= 13:
        print('13 + 49 + 84 + 155 + 97: что получится? Головная боль!')
    else:
        print('Что-что?')
```

## Мы импортируем модуль sys,
   и в создаваемой нами функции silly_age_joke
   присваиваем переменной age, переведенное в числовой тип данных,
   значение, которое получаем через объект stdin 
   из функции readline модуля sys.

# Результат:
silly_age_joke()

>>>>> Сколько вам лет?
<<<<< 10
>>>>> 13 + 49 + 84 + 155 + 97: что получится? Головная боль!

silly_age_joke()
>>>>> Сколько вам лет?
<<<<< 15
>>>>> Что-что?

-----------------
КЛАССЫ И ОБЪЕКТЫ:
-----------------

Объекты — это способ организации кода в программе,
 а также способ разделения сложных задач на более простые,
 что облегчает их решение.

В языке Python объекты определяются классами,
 благодаря которым объекты можно разделять по смысловым группам. 

Классы можно использовать и для организации фрагментов кода в Python-программе.
 Например, возьмем модуль turtle.
 Все действия, которые может выполнять этот модуль
 — перемещения черепашки вперед и назад, повороты направо и налево и так далее,
 — являются функциями класса Pen.
 Объект же является конкретной сущностью, принадлежащей этому классу.
 Для одного класса можно создать множество объектов, чем мы скоро и займемся.

# Задать класс:

class Things:
    pass

## Pass — команда (конструкция),
 с помощью которой можно создавать классы или функции,
 поначалу не программируя их поведение.

Когда один класс является частным случаем (подклассом) другого класса,
 говорят, что первый класс — потомок, а второй — предок.

Для обозначения того, что создаваемый класс является потомком другого класса, нужно указать имя класса-предка в скобках после имени нового класса. Вот так:

#

class Inanimate(Things):
    pass

---------------------
КОДЫ ОШИБОК В PYTHON:
---------------------

**
SyntaxError - синтаксическая ошибка

# означает, что вы ввели данные не в том порядке,
  который ожидает Python, или не ввели те данные, которые он от вас ждал.

**
SyntaxError: EOL while scanning string literal

# Не соблюдена парность кавычек (есть открывающие. нет закрывающих).

**
SyntaxError: invalid syntax

# Путаница с кавычками (разные типы вперемешку) и данными между ними.

**
Traceback (most recent call last)

# не верное использование операторов и функций, недопустимые условия их использования.

**
TypeError: unsupported operand type(s) for /: 'list' and 'int'

# недопустимые операторы для используемого типа данных.


**
TypeError: can only concatenate list (not "int") to list

# Не возможно складывать переменные с разным типом данных

**
TypeError: 'tuple' object does not support item assignment

# объект кортеж не поддерживает изменение своих значений.

**
TypeError: unsupported operand type(s) for +: 'dict' and 'dict'

# Python отказывается объединять словари, потому что не знает, как это делать.Python отказывается объединять словари, потому что не знает, как это делать.


**
Unexpected indent — неожиданное выравнивание

# Например если в блоке кода не совпадает количество отступов.

**

ValueError

# Это тип ошибки, которым Python сообщает,
 что значение, которое вы попытались использовать, здесь не подходит. 

**

NameError: name 'first_variable' is not defined

# Может быть одна из двух причин - или вызывается значение не заданной ранее переменной,
  или вызывается значение переменной область видимости которой ограничена функцией,
  внутри которой эта переменная задана.


