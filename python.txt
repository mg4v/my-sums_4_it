----------
УСТАНОВКА:
----------
https://www.python.org/ --> DOWNLLOADS (3v)
запускаем:
 - Add Python to PATH
 - Install Now

---------------------------------------------
ПРОВЕРКА ВЕРСИИ, ЗАПУСК, ВЫПОЛНЕНИЕ ПРОГРАММ:
---------------------------------------------

** Проверка версии:
python3 --version

** Запуск python в консоли:
python3

** Выход из python:
exit()

** Файлы в python имеют расширения ".py".

** запуск файла с программой через оболочку python:
python3 <имя_файла>.py

-----------------------------
УСТАНОВКА JAVA SDK И PyCHARM:
-----------------------------

Java SDK скачиваем с сайта Oracle:
----------------------------------
Java SE Downloads --> Java Platform (JDK) -->
--> Accept --> 64x

Установка проходит с параметрами по умочанию.
На windows после установки необходимо в системных переменных среды
прописать путь до лиректории куда установилась JDK: JAVA_HOME!!!
Так же можно добавить путь в системную переменную "Path".


Установка PyCharm:
------------------
Сайт https://www.jetbrains.com/pycharm
 - Communty - Download
 - 64-bit launcher
 - Create associations: .py
 
 При первом запуске может спросить требуется ли импортировать настройки из предыдущих версий
 PyCharm если таковые были установлены.
 Можно, так же, выбрать тему и редактор по умолчанию.
 
 
-----------------
РАБОТА В PYCHARM:
-----------------
 
** Создание проекта:
[Creat New Project]
  Выбираем Location - место установки и
    Interpreter - путь до компилятора Python (версия установленного python).
     
** Создать файл:
[ПКМ] на проекте --> "New->Python file"
  Name: имя файла
  Interpreter: путь до комплилятора (установленного в системе python) - внимание на версию.
      
** Запуск, отладка, проверка написанного кода:
"Меню->Run"
Run = [ALT+SHIFT+F10]

** Включить панель инструментов с бытрыми функциями:
"View->Toolbar"


----------
СИНТАКСИС:
----------
# парные ковычки не смешиваются
'' или "", или '""' или "''"

# Перенос не допустим, но если нужен для удобства или требуется смешать кавычки в тексте,
## то заключаем весь текст (строку) в
'''текст'''

# Все арифметические действия (+-*/) выполняются в математическом порядке, если нужно изменить -
## ставим скобки, как это делается в арифметике.

# Можно умножать не только числа но и строки:
print(10 * 'a')

>>> aaaaaaaaaa

# Обьявление переменной:
имя_переменной = значение_переменной

------------
ТИПЫ ДАННЫХ:
------------

# Тип число:
-------------
var_name = 1

# Тип строка:
-------------
var_name = 'текст'
# или:
var_name = "текст"

# В строке можно указать место где будет отображаться значение переменной при
var_1 = какое-то_значение
var_2 = 'начало текста %s продолжение_текста'
print(var_2 % var_1)

>>>>начало текста какое-то_значение продолжение_текста

# Если подставляемых в текст переменных несколько:
var_1 = какое-то_значение
var_2 = еще_одно_значение
var_3 = 'начало текста %s продолжение_текста %s еще_продолжение текста'
print(var_2 % (var_1, var_2))

>>>> начало текста какое-то_значение продолжение_текста еще_одно_значение еще_продолжение текста

# Тип список:
-------------
list_name = ['значение_1', 'значение_2', 'значение_3', ...'значение_n']

# В списках можно хранить значения разных типов, например числа:
some_numbers = [1, 2, 5, 10, 20]

## Или строки:
some_strings = ['Нож', 'отточен', 'точен', 'очень']

## Или числа и строки вперемежку:
numbers_and_strings = [7, 'раз', 'отпей', 1, 'раз', 'отъешь']

## В списках могут даже храниться другие списки:
numbers = [1, 2, 3, 4, 5]
strings = ['хватит', 'циферки', 'считать']
mylist = [numbers, strings]

# Нумерация элементов списка начинается с 3:
['0', '1', '2', ..., n]

# Вызвать значение_3 из списка:
print(list_name[2])

>>>>> значение_3

# Изменить значение элемента списка:
list_name[2] = 'значение_3.0'
print(list_name)

>>>>> ['значение_1', 'значение_2', 'значение_3.0', ...'значение_n']

# Вывести часть элементов:
print(list_nameх[2:5]) 

##   Запись [2:5] означает «показать элементы, начиная с индекса 2 и до индекса 5 (но не включая его)», иначе говоря, элементы 2, 3 и 4.

# Объединить списки:
list1 = [1, 2, 3, 4]
list2 = ['я', 'мечтаю', 'о', 'пломбире']
print(list1 + list2)

>>>>> [1, 2, 3, 4, 5, 'я', 'забрался', 'под', 'кровать']

list3 = list1 + list2 
print(list3)

>>>>> [1, 2, 3, 4, 5, 'я', 'забрался', 'под', 'кровать']


# Также можно умножить список на число с помощью оператора (*).
## Например, умножим list1 на 5:
list1 = [1, 2]
print(list1 * 5)

>>>>> [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]

## Фактически это означает «повторить list1 пять раз», поэтому в итоге получается
### 1, 2, 1, 2, 1, 2, 1, 2, 1, 2.
## Но обратите внимание — деление и вычитание со списками не ра- ботают!!!
## Также не выйдет сложить список с несписковым значением!!!

Тип Кортеж:
-----------
Главное отличие кортежа от списка в том, что кортеж невозможно изменить после его создания.

# Задать кортеж и вывести значение его 4-го элемента на экран:
fibs = (0, 1, 1, 2, 3)
print(fibs[3])

>>>>> 2

Тип Словарь:
------------

Словарями в Python называются наборы значений аналогично спискам и кортежам. Отличие состоит в том, что каждому элементу словаря соответствуют ключ и связанное с ним значение.

# Задать словарь:
имя_словаря = { 'ключ_0': 'значение_0, 'ключ_1': 'значение_1, ..., 'ключ_n': 'значение_n}

# Получить значение ключа по словарю:
 print(имя_словаря['ключ_n'])

>>>>> значение_n

# Удалить ключ-значение:
del имя_словаря['ключ_n']

# Изменить значение ключа в словаре:
имя_словаря['ключ_n'] = 'новое_значение_n'

Объединять словари с помощью оператора "+" нельзя!!!

--------
ФУНКЦИИ:
--------

Функция — это фрагмент кода, который выполняет какую-то задачу.

---
PRINT - печать на экран

# Вывести на экран:
print(что_вывести)
print('текст')
print(имя_переменной)

---
APPEND - добавить элемент в конец списка

имя_списка.append('новый_элемент')

---
DEL - удаление элемента из списка:
#
del имя_списка[номер_элемента]









