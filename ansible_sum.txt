СТРУКТУРА ФАЙЛА ИНВЕНТОРИ:
--------------------------

...
[<GROUP_NAME>]
<HOST_1>
<HOST_n>

# при необходимости можно задать имя пользователя под которым будет выполняться подключение к хостам

[all:vars]
ansible_user="<USER_NAME>"
...

ЗАПУСК ПЛЕЙБУКОВ:
-----------------
#---->
ansible-playbook <PLAYBOOK_NAME.yml> \
    -i <INVENTORY_PATH> \
    -e '<VAR_KEY>=<VAR_VALUE>'   # <VAR_KEY> должен быть указан в файле плейбука;
<----#

---------------------
ЗАПОЛНЕНИЕ ПЛЕЙБУКОВ:
---------------------

# УКАЗАТЬ ГРУППУ ХОСТОВ (ИЗ ФАЙЛА ИНВЕНТОРИ):

---
- hosts: <GROUP_NAME>
...

# УКАЗАТЬ ИСПОЛЬЗУЕМЫЕ В ПЛЕЙБУКЕ ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ:

---
vars:
  <GROUP_VARS_KEY:>     # Имя группы переменных, если потребуются действия (использование) с несколькими переменными;
    - <VAR_VALUE_1>
    - <VAR_VALUE_n>
...

# ПЕРЕЧИСЛИТЬ ВЫПОЛНЯЕМЫЕ В ПЛЕЙБУКЕ ЗАДАЧИ И ИХ ПАРАМЕТРЫ:

---
tasks:
- name: <TASK_NAME_1>
  <MODULE_NAME>:
    <MODULE_PARAMS_1>
    <MODULE_PARAMS_n>

- name: <TASK_NAME_n>
  <MODULE_NAME>:
    <MODULE_PARAMS_1>
    <MODULE_PARAMS_n>
...

---------------------------------
МОДУЛИ (КОМАНДЫ) И ИХ ОПЦИИ В ЗАДАЧАХ:
---------------------------------

# УКАЗАТЬ КАКИЕ ГРУППЫ ПЕРЕМЕННЫХ ИЛИ КАКИЕ ПЕРЕМЕННЫЕ БУДУТ ИСПОЛЬЗОВАТЬСЯ В ЗАДАЧЕ:

---
with_items: "{{ GROUP_VARS_KEY }}"
...

; Например, если нужно скопировать определенные файлы конфигов на удаленном хосте, можно задать имена переменных
    через vars и указать задаче копирования вместо имен файлов значение {{ item }}:
---
- hosts: all
  vars:
    configs:
      - addresses.xml
      - address-settings.xml
  tasks:
  - name: backup
    copy:
      remote_src: true
      src: /opt/Apache/artemis/broker/etc/{{ item }}
      dest: /opt/Apache/artemis/broker/etc/{{ item }}.{{ backup_postfix }}
    with_items: "{{ configs }}"
...

; значение переменной {{ backup_postfix }} вводится оператором при запуске плейбука, например:

#---->
    -e 'backup_postfix=001'
<----#

# УКАЗАТЬ ЗАДАЧЕ, ЧТО НЕОБХОДИМО ВЫПОЛНИТЬ ЕЕ ТОЛЬКО НА ОДНОМ (НА ПЕРВОМ) ХОСТЕ ИЗ ФАЙЛА ИНВЕНТОРИ:

---
run_once: true
...

# МОДУЛЬ КОПИРОВАНИЯ ФАЙЛОВ:

---
copy:
  remote_src: true              # позволяет выполнять копирование на удаленном хосте;
  src: <SOURCE_PATH>            # откуда - указывает абсолютное имя файла (путь) который нужно скопировать;
  dest: <DESTINATION_PATH>      # куда - указывает абсолютное имя файла (путь) в который нужно скопировать;
  # другие возможные опции;
...

; Работает и в обратную сторону, когда на удаленный хост загружаются (копируются) файлы с локального хоста,
    в этом члучае указывать опцию "remote_src: true" - не требуется!!!


# ЗАГРУЗКА ФАЙЛОВ С УДАЛЕННОГО ХОСТА НА ЛОКАЛЬНЫЙ ХОСТ:

---
fetch:
  src: <SOURCE_PATH>            # откуда - указывает абсолютное имя файла (путь) - что нужно скопировать с удаленного хоста;
  dest: <DESTINATION_PATH>      # куда - указывает путь до дериктории на локальном хосте в которую нужно скопировать
                                    (может быть относительным);
  flat: true                    # файлы должны быть загружены как отдельные элементы, а не в виде рекурсивной
                                    структуры каталогов.    
...

# ВЫПОЛНИТЬ КОМАНДУ НА УДАЛЕННОМ СЕРВЕРЕ:

---
shell: <BIN_FILE_PATH> <COMMAND_OPTIONS>
...

; Останавить службу Artemis:
shell: sudo /bin/systemctl stop artemis


# СОХРАНИТЬ РЕЗУЛЬТАТ ВЫПОЛНЕНИЯ КОМАНДЫ (заданной с помощью модуля "SELL") В ПЕРЕМЕННУЮ;
## указывается под нужным модулем "shell" в нужной таске:

---
register: <VAR_NAME>
...

# ВЫВОД ИНФОРМАЦИИ О ВЫПОЛНЯЕМЫХ ЗАДАЧАХ И ТЕКУЩЕМ СОСТОЯНИИ ПЛЕЙБУКА:

---
- debug: <DEBUG_OPTIONS>
...

; Вывести строки из стандартного вывода (stdout) переменной <VAR_NAME>. Каждая строка будет выведена отдельно.

---
- debug: var=<VAR_NAME>.stdout_lines
...

; Вывод сообщения <MSG_TEXT> на консоль при выполнении действий в плейбуке:

---
- debug:
    msg: "<MSG_TEXT>"
...

# ПОВЫШЕНИЕ ПРИВЕЛЕГИЙ ПРИ ВЫПОЛНЕНИИ ЗАДАЧ:

#######
# Модуль become в Ansible используется для повышения привилегий при выполнении задач на удаленном сервере.
#   Он позволяет выполнять задачи с правами root или другими повышенными правами, даже если пользователь,
#   от имени которого запущен Ansible, не имеет таких прав.
#
#   Это достигается путем аутентификации с использованием пароля или ключа SSH, который предоставляет
#   необходимые права доступа.
#   После успешной аутентификации Ansible запускает все последующие задачи с повышенными правами.
#######

Примеры:

; не повышать:

---
become: no
...

; Повышать привелегии:

---
become: yes
...

# ВЫПОЛНИТЬ УСТАНОВКУ ПАКЕТА НА ЦЕЛЕВОЙ СИСТЕМЕ:

; Пакетным менеджером YUM (Пример установки Apatch):

---
- name: Install Apache
  yum: name=httpd state=present
  become: yes
...

# СБОР ФАКТОВ О ЦЕЛЕВОЙ СИСТЕМЕ:

#######
# Используется для сбора информации о целевой машине, такой как имя хоста, операционная система,
#    версия ядра и другие факты, которые могут быть полезны при управлении системой.
#    Эта информация собирается автоматически при подключении к удаленной машине
#    и может быть использована в последующих задачах.
#######

Примеры использования gather_facts:
; не собирать факты:

---
gather_facts: no
...

; В этом примере первый шаг собирает факты о каждой целевой машине,
    а второй шаг использует эти факты для вывода имени хоста машины.

---
- name: Gather facts about the target host
  hosts: all
  gather_facts: true

- name: Print the hostname
  debug:
    var: ansible_hostname
...
