sum_adv-it_it.txt
-----------------------------------------

RPO и RTO - Что это такое и в чём разница

-----------------------------------------

RPO (recovery point objective) = DATA LOSS – допустимая потеря данных (сколько) при disaster.

Любая информационная система должна обеспечивать (внутренними средствами, или сторонними)

защиту своих данных от потери выше приемлемого уровня.

Это можно сделать с помощью:

- backup каждый период равный RPO. Например: RPO = 1 час, значит BACKUP - 1/час;

- создание replica для уменьшения DATA LOSS.

RTO (recovery time objective) – допустимое время восстановления данных.

Любая информационная система должна обеспечивать (внутренними ли средствами, или сторонними)

возможность восстановления своей работы в приемлемый срок.

Обеспечивается средствами автоматизации FULL Recovery и использованием MULTIREGION в CLOUD.

----------------------------------------------

PaaS SaaS IaaS - Что это такое и в чём разница

----------------------------------------------

IaaS (Infrastructure as a Service) - инфраструктура как услуга.

Инфраструктура берется в аренду. Все настраивается и сопровождается самостоятельно.

PaaS (Platform as a Service) - платформа как услуга.

Занимаемся только кодом, настройка среды автоматически.

SaaS (Software as a Service) - программное обеспечение как сервис.

Ничего сопровождать и настраивать не нужно. Готовый продукт. Нужно только использовать.

-----------------------------------------

Helm Charts - Что это такое и зачем нужно

-----------------------------------------

Helm — это инструмент развертывания Kubernetes для автоматизации создания,

упаковки, настройки и развертывания приложений и служб в кластерах Kubernetes.

------------------------------------------------------

Основы Шифрования за 5 минут - Asymmetric Cryptography

------------------------------------------------------

Защита передаваемой информации осуществляется посредством

Чарты Helm (Helm Charts) — это пакеты Helm, состоящие из файлов и шаблонов YAML,

которые преобразуются в файлы манифеста Kubernetes.

Т.е. Чарт — предварительно настроенный шаблон ресурсов Kubernetes.

Чарты могут повторно использоваться кем угодно и в любой среде, что уменьшает сложность и количество дубликатов.

-------------------------------------------

Основы Шифрования - Asymmetric Cryptography

-------------------------------------------

Защита передаваемой по сети информации обеспечивается посредством ее шифрования.

Это делается с помощью пары ключей шифрования:

- private key:

Остается у владельца пары, расшифровывает сообщения зашифрованные публичным ключем;

- public key:

Передается респондентам для шифрования передаваемых ими сообщений владельцу пары ключей.

Создание SSH ключей:

--------------------

...

ssh-keygen -t rsa -b 4096 -m PEM -f cryptoKey

...

где:

-t Тип клча

-b Количество байтов в создаваемом ключе. Чем их больше, тем более стойким является ключ.

Некоторые типы ключей имеют фиксированную длину и не меняют при использовании опции -b;

-m формат ключа для параметров преобразования при импрте (-i) и экспорте (-e);

PEM и PKCS8 - форматы открытых ключей;

-f имя ключа шифрования.

Проверить шифрование файла можно утилитой openssh, но она не понимает формат ключа PEM.

Поэтому, предварительно,

поменяем формат публичного ключа на PKCS8:

------------------------------------------

...

ssh-keygen -f cryptoKey.pub -e -m PKCS8 > cryptoKey.public

...

где:

-e экспорт ключа в другой формат (с ключем -m).

Шифруем файл с помощью openssh публичный ключем:

------------------------------------------------

...

openssl rsautl -encrypt -pubin -inkey cryptoKey.public -in message.txt -out EncryptedMessage.txt

...

где:

- rsautl утилита подписи, проверки, шифрования и дешифрования данных с использованием алгоритма RSA;

-encrypt шифрует входные данные с помощью открытого ключа RSA;

-pubin указывает, что входной файл является открытым ключом RSA;

-inkey указывает файл входного ключа, по умолчанию он должен быть закрытым ключом RSA;

-in указывает имя входного файла для чтения данных или стандартный ввод, если этот параметр не указан;

-out указывает имя выходного файла для записи или стандартный вывод по умолчанию.

Расшифровываем файл с помощью openssl приватным ключем:

-------------------------------------------------------

...

openssl rsautl -decrypt -inkey cryptoKey.private -in EncryptedMessage.txt -out DecryptedMessage.txt

...

где:

-decrypt расшифровывает входные данные с помощью закрытого ключа RSA.

---------------------------------------------------------------

RAID-0 : Что это, для чего и как его сделать на примере Windows

---------------------------------------------------------------

RAID (Redundant Array of Independent Disks - Резервированный массив независимых дисков)

— технология виртуализации данных

для объединения нескольких физических дисковых устройств

в логический модуль для повышения отказоустойчивости и (или) производительности.

RAID-0: 2 диска (или несколько) объединяются в 1 с общим пространством.

Запись производится так: 50% КАЖДОГО файла (т.е. - половина файла )записывается на 1 диск,

а другие 50% на 2 диск.

Информация разбивается на блоки данных фиксированной длины (по количеству дисков в массиве)

и записывается на оба/несколько дисков поочередно, то есть один блок на первый диск, а второй блок на второй диск соответственно.

Увеличение количества дисков увеличивает количeство блоков и скорость записи.

Хорошо подходит для случаев когда требуется хранение данных больших обьемов

с высокой скоростью чтения/записи без отказоустойчивости.

Главный минус - потеря хотя бы одного из дисков приведет к полной потере данных!

ПРИМЕР ДЛЯ WINDOWS RAID-0:

--------------------------

RUN: diskmgmt.msc # Управление дисками (Доступно, так же, из консоли управленя компьютером).

Новые диски нужно инициализировать:

Partition style:

- MBR: если диски меньше 4ГБ

- GPT: если диски больше 4ГБ.

ПКМ на любом из обьединяемых дисков --> New Striped Volume (либо в меню : Action --> All Tasks --> New Striped Volume)

--> NEXT --> Переносим обьединяемые диски из Avalable в Selected столбец --> Назначаем букву диска, ФС, Label,

size (если нужно), параметры форматирования --> NEXT --> NEXT --> Мастер запросит подтверждение о том,

что тип дисков смениться с basic на dynamic (это не позволит, например, установить ОС на данные диски) --> Yes

-------------------------------------------------------------------

RAID-1 : Что это, как его создать и восстановить на примере Windows

-------------------------------------------------------------------

RAID 1 (mirroring — «зеркалирование») — массив из двух (или более) дисков, являющихся полными копиями друг друга.

RAID-1 - тип обьединения дисков для обеспечения отказоустойчивости.

Все данные полностью копируются на оба диска.

Плюсы:

- Данные полностью доступны если хотя бы один диск доступен;

- Вероятность выхода из строя обоих дисков ниже чем выход одного;

- Более высокая скорость чтения данных (при распараллеливании запросов);

Минус: за 1 обьем 2-ая оплата.

Хорошо подходит для небольших серверов и критичных БД где требуется отказоустойчивость.

ПРИМЕР ДЛЯ WINDOWS RAID-1:

--------------------------

RUN: diskmgmt.msc

ПКМ на любом из обьединяемых дисков --> New Mirrored Volume

--> NEXT --> Переносим диск с которым будем обьединять из Avalable в Selected столбец

--> Назначаем букву диска, ФС, Label, size (если нужно), параметры форматирования --> NEXT --> NEXT

--> подтверждение, что тип дисков смениться с basic на dynamic --> Yes

Восстановление оставшегося диска, если второй диск вышел из строя:

* В этом случае "рабочий" диск не будет доступен из проводника!

Необходимо:

RUN: diskmgmt.msc

ПКМ на оставшемся из обьединяемых дисков --> Remove Mirror...

Диск восстановится (отобразится в проводнике) - данные снова будут доступны.

При этом, тип восстановленного диска останется - "dynamic".

Можно добавить ему новое зеркало:

ПКМ --> Add Mirror... --> выбираем второй диск --> Yes (type dynamic)

В результате подключения нового зеркала - данные обоих дисков взаимно синхронизируются.

-------------------------------------------------------------------

RAID-5 : Что это, как его создать и восстановить на примере Windows

-------------------------------------------------------------------

RAID-5 — массив независимых дисков с чередованием блоков данных и контролем чётности для обеспечения отказоустойчивости.

Требуется минимум 3 диска (от 3 до 16).

Данные разбиваются на равные блоки.

Блоки данных и контрольные суммы (parity table) циклически записываются на все диски массива.

Под контрольными суммами подразумевается результат операции XOR (исключающее или).

Xor обладает особенностью, которая даёт возможность заменить любой операнд результатом,

и, применив алгоритм xor, получить недостающий операнд.

Пример запси данных:

Dsk1 Dsk2 Dsk3

---- ---- ----

A1 A2 Asum

B1 Bsum B2

Csum C1 C2

где:

- Dsk(n): Номера дисков;

- A,B,C(n): Номера блоков;

- A,B,C(sum): XOR суммы соответствующих блоков.

Плюсы:

- Экономичность (с ростом числа дисков растет):

Объём дискового массива RAID 5 рассчитывается по формуле (n−1)×S,

где n — число дисков в массиве, а S — объём диска (наименьшего, если диски имеют разный размер).

- Высокая скорость чтения.

Минусы: Ниже скорость записи.

При выходе из строя одного диска надёжность тома сразу снижается до уровня RAID 0

с соответствующим количеством дисков n−1. При этом снижается скорость чтения.

ПРИМЕР ДЛЯ WINDOWS RAID-5:

--------------------------

RUN: diskmgmt.msc

ПКМ на любом из обьединяемых дисков --> New RADE-5 Volume

--> NEXT --> Переносим диски с которыми будем обьединять из Avalable в Selected столбец

--> Назначаем букву диска, ФС, Label, size (если нужно), параметры форматирования --> NEXT --> NEXT

--> подтверждение, что тип дисков смениться с basic на dynamic --> Yes

При замене прврежденного диска:

ПКМ на любом из RAID-5 дисков --> Repair Volume --> выбираем диск --> Yes (type dynamic)

В результате подключения (замены) нового диска - происходит "Rebild" - восстановление недостающих блоков.

-------------------------------------------

RAID-10 : Что это, для чего, плюсы и минусы

-------------------------------------------

RAID 10 (RAID 1+0) — зеркалированный массив, типа RAID 0,

сегментами которого вместо отдельных дисков являются массивы RAID 1.

Минимум дисков = 4, т. е. общее пространство двух зеркал.

Пример запси данных:

Dsk1 Dsk2 Dsk3 Dsk4

---- ---- ---- ----

A1 A1 A2 A2

B1 B1 B2 B2

C1 C1 C2 C2

Плюсы:

- Очень высокая скорость чтения/записи;

- Высокая отказоустойчивость (минимум в 2 раза выше чем у RADE-0 и RADE-1).

Минусы: дорого - цена минимум в 2 раза выше.

Отлично подходит для отказоустойчивых высокодоступных БД.

-------------------------------------------

RAID-01 : Что это, для чего, плюсы и минусы

-------------------------------------------

RAID 01 (RAID 0+1) - представляет собой массив типа RAID 1, состоящий из двух вложенных массивов типа RAID 0.

Количество дисков в обоих вложенных массивах RAID 0 должно быть одинаковым,

данный тип может работать лишь с чётным количеством дисков.

Пример запси данных:

Dsk1 Dsk2 Dsk3 Dsk4

---- ---- ---- ----

A1 A2 A1 A2

B1 B2 B1 B2

C1 C2 C1 C2

Так же подходит для БД.

--------------------------------------------------------

Компьютерные Сети: IPv4, IPv6, Subnet, DHCP, APIPA, CIDR

- ЧТО ЭТО? Знания для Интервью

--------------------------------------------------------

IP-адрес:

---------

Идентификационный номер хоста в сети (где используется протокол TCP/IP).

Существует 2 версии: v4 и v6

v4 - 32-bit состоит из 4 октетов представленных в DECIMAL.

v6 - 128-bit в HEX.

Идущие подряд нули в IPv6 адресах могут заменяться "::"

IPv4 cостоит из:

- Subnet ID: идентификатор сети - первые 3 октета.

- Host ID: адрес хоста в сети.

Для того, что бы компьютеры могли свободно общаться - они должны быть в одной сети!

Subnet Mask - Маска подсети. Состоит из 4 октетов со значениями от 0 до 255 (8-bit).

SM - это шаблон - с помощью IP адреса и маски можно вычислить адрес сети.

Правило такое: Октеты в Subnet Mask равные 255 заменяются на соответствующие значения из

IP адреса. Октеты равные 0 - приравниваются к нулю.

Broadcast адрес - "широковещательный" адрес, как правило - последний адрес в сети (255).

Предназначен для отправки широковещательных запросов - т.е. запросов, направленных всем устройствам

подключенным к сети.

Пример:

IP: 192.168.100.11

SM: 255.255.255.0

Адрес сети = 192.168.100.0

Broadcast = 192.168.100.255

CIDR Notation (Classless Inter Domain Routing)- сокращенная весия записи IP и SM: IP/SM,

При этом, SM указывается в виде 2-разрядного десятичного числа, которое обозначает

количество 1 в SM записанной в формате binary.

Т.е. SM 255.255.255.0 = 11111111.11111111.11111111.00000000 = 24 единицы.

- CIDR в сети с маской 24 будет = IP/24

Пример:

- 192.168.100.11/24

В адрес сети + мака - определют количество узлов, которые могут получть IP адреса в данной сети.

Local loop (локальная петля) - внутренний IP адрес хоста, по которому он может обращаться к самому себе.

В основном используется для локальных приложений, которые должны общаться по сети внутри компьютера. В

По умолчанию имеет значение:

IPv4 = 127.0.0.1

IPv6 = ::1

Адреса, которые используют для локальных сетей (Private IP):

10.0.0.0 - 10.255.255.255

127.0.0.0 - 127.255.255.255

172.16.0.0 - 172.31.255.255

192.168.1.0 - 192.168.255.255

0.0.0.0/0 - обозначает все адреса TCP/IP

Используется для Route Table и FireWall Rules.

Route Table - таблица маршрутизации, содержит записи направления сетевого трафика

- с каких IP и через какие IP можно попасть к каким IP ))

FireWall Rules - правила сетевого экрана - блокируют или разрешают сетевой трафик по определенным правилам:

источник-назначение, адреса, порты, приложения, протоколы.

Проверка IP-адреса на Windows:

------------------------------

...

CMD: ipconfig

...

Покажет основные сетевые настройки хоста: IP, SM.

Проверка доступности хоста по указанному IP адресу:

---------------------------------------------------

...

ping <IP_адрес>

...

Команда одинакова для любых OS.

Домашняя сеть:

--------------

Internet Provider --> назначает Public IP вашему роутеру

--> Сам роутер имеет свой внутренний IP как правило 1-вый адрес в своей локальной сети

--> Роутер посредством работающего на нем сервиса DHCP раздает IP адреса своей внутренней сети домашним устройствам.

Диапазон раздаваемых роутером IP адресов настраивается на самом роутере в настройке DHCP-Server.

Default Gateway (Шлюз по умолчанию): IP адрес через который домашние устройства,

получившие IP адреса от роутера будут получать доступ к интернету (выходить в интрернет) - это внутренний IP роутера.

При этом, в интернете будет виден Public IP роутера.

DHCP (англ. Dynamic Host Configuration Protocol — протокол динамической настройки узла)

— прикладной протокол, позволяющий сетевым устройствам автоматически получать IP-адрес и другие параметры,

необходимые для работы в сети TCP/IP.

APIPA:

------

Если соединить два компьютера в локальную сеть (с помощью простого кабеля через разъемы под коннектор RJ-45,

Они сами настроят соединение друг с другом используя технологию APIPA.

APIPA (Automatic Private IP Addressing - Автоматическая частная IP-адресация):

набор технологий, которые автоматически создают IP-сеть без конфигурации или специальных серверов.

Диапазон IP-адресов для APIPA составляет (от 169.254.0.1 до 169.254.255.254)

65 534 используемых IP-адреса с маской подсети 255.255.0.0.

CIDR IPv4 = 169.254.0.0/16

SWITCH or HUB:

-------------

Если нужно соединить кабелем несколько устройств в одну сеть с IP адресацией APIPA

можно соединить их через устройство SWITCH (коммутатор) или HUB (концентратор).

HUB - примитивен, и просто объединяет компютеры в одну сеть, передавая трафик от одного ко всем.

SWITCH - умное устройство - оно педает пакеты точно назначенному адресу.

------------------------------------------------------------

HAProxy - Бесплатный LoadBalancer - Установка и Конфигурация

------------------------------------------------------------

HAProxy — серверное программное обеспечение для обеспечения высокой доступности и балансировки нагрузки

для TCP- и HTTP-приложений посредством распределения входящих запросов на несколько обслуживающих серверов.

Программа написана на C&.

Простыми словами - HAProxy: очень крутой и бесплатный LoadBalanser.

http://www.haproxy.org/

Установка (Ubuntu):

-------------------

...

sudo apt install haproxy -y

...

Прверка установленной версии haproxy:

-------------------------------------

...

haproxy -v

...

Прверка статуса службы haproxy:

-------------------------------

...

sudo service haproxy status

или

sudo systemctl status haproxy.servoce

...

Конфигурирование haproxy:

-------------------------

...

cd /etc/haproxy/

sudo vim ./haproxy.cfg

...

- В конец файла добавляем:

#============================

# frontend - где принимаем запросы, beckend - куда направляем.

# имена frontend-ов и backend-ов - произвольные.

# roundrobin - тип балансировки "по кругу" - балансирует на каждый хост по очереди.

frontend my_http_front

bind *:80

default_backend my_httpd_back

frontend my_secret_front

bind *:8080

default_backend my_secret_back

backend my_httpd_back

balance roundrobin

server myweb1 <IP_адрес_сервера>:80

server myweb2 <IP_адрес_сервера>:80

backend my_secret_back

balance roundrobin

server mysecretweb <IP_адрес_сервера>:80

#==================================

Перезапуск haproxy:

-------------------

...

sudo service haproxy restart

или

sudo systemctl restart haproxy.servoce

...

Регулировка процента бланасировки запросов на конкретные хосты:

---------------------------------------------------------------

...

sudo vim /etc/haproxy/haproxy.cfg

...

#==================================

# В блоке нужного backend-а после <IP:PORT> нужного сервера добавляем вес weigth <процент запросов>

# В описанном ниже случае 9 из 10 запросов пойдет на myweb1, a 10-й на myweb2:

backend my_httpd_back

balance roundrobin

server myweb1 <IP_адрес_сервера>:80 weigth 90

server myweb2 <IP_адрес_сервера>:80 weigth 10

--------------------------------------------------------------------------------------------------

Что такое VPN - Для чего его используют - Установка и Настройка Бесплатного OpenVPN Сервера с нуля

--------------------------------------------------------------------------------------------------

VPN (англ. Virtual Private Network «виртуальная частная сеть»)

— обобщённое название технологий,

позволяющих обеспечить одно или несколько сетевых соединений поверх другой сети, например Интернет.

OpenVPN — свободная реализация технологии виртуальной частной сети (VPN)

с открытым исходным кодом для создания зашифрованных каналoв типа точка-точка или сервер-клиенты между компьютерами.

Она позволяет устанавливать соединения между компьютерами,

находящимися за NAT и сетевым экраном, без необходимости изменения их настроек.

Пример:

-------

1) Есть внутренняя сеть организации 10.10.0.0/16

2) В ней есть внтренняя подсеть Private_Subnet - ресурсы внутри этой подсети не имеют доступа интернет

Соответственно, доступ ко всем ресурсам возможен только внутри 10.10.0.0/16 сети

3) Так же есть Public_subnet с доступом к интернету.

4) Для доступа к Private_Subnet извне разворачиваем VPN-сервер в подсети Public_subnet.

VPN-сервер получает внутренний IP из сети 10.10.0.0/16 и внешний IP.

5) Устанавливаем VPN клиент на удаленном хосте для установки тоннеля между

устройством внешней сети и VPN-сервер используя login/pass, который конфигурируется на VPN-сервер.

6) Подключаясь к VPN-серверу по VPN-клиенту мы получаем внутренний IP из сети 10.10.0.0/16.

Теперь м можем подклбчаться к ресурсам Private_Subnet организации.

Установка openVPN (Ubuntu):

------------------

!!! Важно, перед установкой открыть на сервере порты:

TCP:

- 22: Только для установки;

- 943: Только для WebUI VPN ADMIN;

- 443: Для VPN Clients;

UDP:

- 1194: Для VPN Tunnel.

Открываем инструкцию по установке по нужному дистрибутиву Linux на странице:

https://openvpn.net/download-open-vpn/

Ubuntu:

...

apt update && apt -y install ca-certificates wget net-tools gnupg

wget https://as-repository.openvpn.net/as-repo-public.asc -qO /etc/apt/trusted.gpg.d/as-repository.asc

echo "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/as-repository.asc] http://as-repository.openvpn.net/as/debian jammy main">/etc/apt/sources.list.d/openvpn-as-repo.list

apt update && apt -y install openvpn-as

...

После установки программа выдаст сообщение о том, по какому адресу можно найти UI клиента и администратора:

https://ip:943/adnib # admin

https://ip:943/ # client

Используется порт 943

Задаем пароль для пользователя openvpn:

...

passwd openvpn

...

После получения доступка к крнсоли администратора можно закрыть 22 порт.

Идем в консоль администратора:

# По умолсчанию в адресе консоли указывается private_IP, но можно указать внешний (если нет доступа)

1) CONFIGURATION --> Network Settings:

========

Hostname or Ip Address: <IP_address or Hos_name VPN server>

--> Update Running Server.

2) VPN Settings:

Network Address, mask (bits): # диапазон ip-адресов выдаваемых коиентам.

Group Default IP Address Network: # Удаляем если не используем группы адресов.

Routing: # Указываем адрес подсети к которой предоставляем доступ.

--> Save Settings --> Update Running Server.

3) Создаем пользователя (-лей) для клиентов (по умолчанию для совбодной лицензии не более 2 пользователей):

USER MANAGEMENT --> User Permissions:

Указываем Username, Group (если нужно), Пароль (More Settings) и отмечаем нужные права.

--> Save Settings --> Update Running Server.

Установка клиента на РМ:

------------------------

1) Идем в UI для клиентов:

логин/пароль пользователь - открывается ссылка на дистрибутив клиента (с преднастроенным профилем нашего VPN).

2) Скачиваем дистрибутив для нужной платформы, устанавливаем, открываем, выбираем нужный профиль и аутентифицируемся.

Изменение внешнего вида окна приветствия на странице загрузки дистрибутива клиента:

-----------------------------------------------------------------------------------

Например картинки:

1) Кпируем ссылку в интеренете на интерисующую нас картинку и закачиваем ее на серевер openvpn в папку:

/usr/local/<openvpn_dir>

2) Правим файл конфигурации:

...

vim /usr/local/<openvpn_dir>/etc/as.conf

...

=================

# ищем и раскоментируем строку "sa.company_name=<вводим_текст_приветствия>

# Добавляем:

sa.logo_image_file=<путь_до_скаченной_картинки>

=================

3) Перезапускаем сервис openvpn:

...

service openvpn restart

...

------------------------------------------------------
CURL CURL - Установка 
| Основы использования CURL 
| Работа с API | Запросы с JSON Payload | Парсинг с jq
------------------------------------------------------

Встроенный в bash терминал web-browser.

1) Установка:
...
apt install curl -y
...

2) Проверка версии:
...
curl --version
...

# Установить на Windows: https://curl.se/windows/
## Распаковываем из скачанного архива папку "bin" со всем ее содержимым
## в дерикторию C:\Windows\System32\
## Теперь можно запускать curl в cmd из любой директории.

3) Запросы:
; Загрузить данные по адресу (html body страницы или текстовый файл):
...
curl <address>
...

; Загрузить бинарный файл по адресу:
...
curl <address>/<source_file> --output <dest_file> 
...

; Выполнить "тихую" загрузку данных (фоном):
...
curl -s <address>
...

; Загрузить данные по API:
...
curl <api_address>        # можно пропустить через | jq
...

; Получить headers:
...
curl -i <address>
...

; Переместиться на новый адрес если он переехал и на нем есть редирект на новый адрес:
...
curl -L <old_address>
...

; Получить больше информации о сайте:
...
curl -v <address>
...

; Подделать в запросе свой User-agent
...
curl --user-agent <address>
...

; Отправить текстом данные на адрес или API - в результате API что-то возвращает:
...
curl <address_or_api> -d '{<json_request>}'
...

; Отправить файлом данные на адрес или API - в результате API что-то возвращает:
...
curl <address_or_api> -d @<file_name>
...

# Пример:
## Вытащить определенные данные (значение ключа) из ответа API
### при пересылке данных файлом - исключить:
curl -s <address_or_api> -d @<file_name> | jq .<key_name> -r

## Можно поместить эти данные в переменную:
<varname>=$(curl -s <address_or_api> -d @<file_name> | jq .<key_name> -r)
echo $<varname>

========
СЛОВАРЬ:
========
* Header:
---------
Заголовок - относится к дополнительным данным,
 помещаемым в начало блока данных, сохраняемых или передаваемых.
 При передаче данных данные, следующие за заголовком, иногда называют полезной нагрузкой
 или телом (body).

* Handshake:
------------
Рукопожатие - обмен специальной информацией для установки доверенного соединения.

* User-agent:
-------------
Средство (браузер) с помощью которого отправляется какой-либо запрос по сети.

* Request:
----------
Запрос.
