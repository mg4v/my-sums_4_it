------------------------------------------
ВЗАИМОДЕЙСТВИЕ С КОМАНДНОЙ ОБОЛОЧКОЙ BASH:
------------------------------------------

; Вызов командной оболочки в GUI:
 CTRL+ALT+t
; Переключиться на виртуальный терминал:
 CTRL+ALT+{{ FUNCTION-KEY_NUMBER }}
   # Как правило в ОС существует 7 виртуальных терминалов:
     - с 1 по 6: текстовые, а 7 - GUI.
-----
CLEAR
Очистить содержимое терминала:
# На самом деле - просто смещается на один экран вниз!
 CTRL+l        # альтернативная комбинация клавиш для вызова CLEAR;
 
----
EXIT
Выйти из текущего сеанса (текущего пользователя):
  CTRL+d        # альтернативная комбинация клавиш для вызова EXIT;
 
-------------------------------
СТАНДАРТНЫЕ ПОТОКИ ВВОДА/ВЫВОДА
STDIN, STDOUT, STDERR:
-------------------------------

ТЕРМИНАЛ - оконечное (физическое) устройство, предназначенное для взаимодействия оператора и компютера.
 Терминал подключался к ЭВМ. Таких терминалов могло быть несколько.
 Терминал может быть запущен удаленно;

ЭМУЛЯТОР ТЕРМИНАЛА - "программный" терминал, эмулирующий работу "физического" терминала;
 Для каждого сеанса пользователя создается отдельный терминал.

КОНСОЛЬ - совокупность устройств ввода/вывода для передачи оператором команд и вывода компьютером результатов.
 Консоль всегда подключена к текущему РМ.

КОМАНДНЫЙ ИНТЕРПРЕТАТОР - программа позволяющая передавать команды пользователя компьютеру.
 В большинстве современных дистрибутивов linux командным интерпретатором по умолчанию является - bash.

КОНСОЛЬ --> ТЕРМИНАЛ --> BASH

Для взаимодействия запускаемых программ с пользователем используются стандартные потоки ввода/вывода:
 - STDIN (0): стандартный поток ввода, по умолчанию настроен на устройство ввода текущей консоли;
 - STDOUT (1): стандартный поток вывода, по умолчанию настроен на устройство вывода текущей консоли;
 - STDERR (2): стандартный поток ошибок, по умолчанию настроен на устройство вывода текущей консоли;

Важно понимать, что в Linux - все есть файл!
 Соответственно - стандартные потоки, это специальные файлы, которые открываются на чтение или запись.
 Именно поэтому мы можем использовать вместо стандартной консоли файлы.

; Передача потока вывода в файл:
{{ COMMAND }}  > {{ FILE_NAME }}            # перезаписывает содержимое файла, либо создает новый если нет с таким именем;
{{ COMMAND }}  >> {{ FILE_NAME }}            # добавляет вывод в конец существующего файла;

По умолчанию в файл передается поток STDOUT, а STDERR выводится на экран.
; Передача потока ошибок в файл:
{{ COMMAND }} 2 }} {{ FILE_NAME }}

; Объединение потоков вывода и передача их в файл:
{{ COMMAND }} 2 }}&1 {{ FILE_NAME }}

КОНВЕЙЕР - передача результатов предыдущей команды (STDOUT) в текущую:
{{ COMMAND_1 }} | {{ COMMAND_2 }} | ... | {{ COMMAND_N }}

-------------------
СПРАВОЧНАЯ СИСТЕМА:
-------------------

---------------------
СИСТЕМНЫЕ ПЕРЕМЕННЫЕ:
- $PATH    # содржит перечень путей в которых ОС ищет исполняемые и справочные файлы программ;

---
MAN

Подробное справочное руководство по коммандам

#
man [OPTIONS] {{ COMMAND_NAME }}

; показывает краткое описание команд, содержащих указанное СЛОВО:
man -k {{ COMMAND_NAME }}
# или
apropos {{ COMMAND_NAME }}

; показывает конкретный раздел справки по указанной команде:
man {{ SECTION_NUMBER }} {{ COMMAND_NAME }}

; НАВИГАЦИЯ:
  [ENTER]                # Листать страницу на одну строку вниз;
  [SPACE]                # Листать страницу на один экран вниз;
  [b]                    # Листать страницу на один экран вверх;
  [p]                    # Вернуться в начало инструкции;
  [/]{{ KEY_WORD }}      # Искать все вхождения указанного СЛОВА в текущем справочном руководстве;
  [n]                    # Перейти к слодующему вхождению {{ KEY_WORD }};
  [q]                    # Выйти из справки.
  
----
INFO

Онлайновое подробное справочное руководство по командам в гипертекстовом формате

#
info [OPTION] {{ COMMAND_NAME }}

; НАВИГАЦИЯ:
  [SPACE]                # Листать страницу на один экран вниз;
  [b]                    # Вернуться в начало инструкции;
  [TAB]                  # Перемещаться по разделам справки (помечены знаком "*");
  [/]{{ KEY_WORD }}      # Искать все вхождения указанного СЛОВА в текущем справочном руководстве;
  [n]                    # Перейти к слодующему вхождению {{ KEY_WORD }};
  [q]                    # Выйти из справки.

------
WHATIS

Показывает краткое описание того, что делает команда, включая номера разделов MAN

#
whatis [OPTION] {{ COMMAND_NAME }}

-------
WHEREIS

Показывает где содержаться двоичные файлы, исходный код, конфигурации и файлы руководства для указанной КОМАНДЫ
 # ищет только в директориях, которые перечислены в переменной $PATH

#
whereis [OPTION] [-BMS directory... -f] {{ COMMAND_NAME }}

----
TYPE

Показывает существует ли КОМАНДА в системе, ее тип, местоположение, является названием или алиасом другой КОМАНДЫ

#
type {{ COMMAND_NAME }}

-----
WHICH

Показывает путь до исполняемого файла команды

#
which [OPTIONS] [--] {{ COMMAND_NAME }}



---------------------------------
ПОЛЬЗОВАТЕЛИ И ГРУППЫ В ОС LINUX:
---------------------------------

Linux -  многопользовательская операционная система.
 Каждый процесс в пользовательском пространстве выполняется от имени того или иного пользователя.
 Поддержка прав на чтение/запись/выполнение поддерживается на уровне файловой системы,
  и позволяет гибко настраивать доступ к файлам отдельных пользователей и пользовательских групп.

ПОЛЬЗОВАТЕЛЬ - входит в систему, проходит процедуру авторизации и идентифицируется с какой-то учетной записью.
УЧЕТНАЯ ЗАПИСЬ - хранит информацию о пользователе, предназначенную для его опознания и предоставления
 доступа к его личным данным и настройкам.
ПРАВА ДОСТУПА - совокупность правил которые регламентирую порядок и условия доступа какого-то субъекта
(например пользователя) к объектам информационной системы (например файлам).
ГРУППА - именованная группа пользователей с одинаковыми правами доступа к тем или иным объектам ИС.
 Группы необходимы для организации нескольких пользователей к различным ресурсам.

Каждый пользователь имеет 2 основных атрибута:
 - UID (User identifier - идентификатор пользователя): ОС различает пользователей именно по UID!
   это число из диапазона 0 - 65535.
 - GID (Group identifier - идентификатор группы): Каждый пользователь в ОС принадлежит, как минимум, к 1 группе пользователей.
   При создании пользователя, по умолчанию создается группа для него. Как правило, имя группы пользователя по умолчанию
    совпадает с его именем. Пользователь может принадлежать к нескольким группам.

Условно можно разделить пользователей на 3 типа:
 - ROOT: суперпользователь (superuser): имеет неограниченные права в ОС.
   UID:GID = 0:0.
   Предназначен для работы с системными файлами, службами и всеми объектами, которые влияют на работу ОС;
 - SYSTEM USERS (Системные пользователи): нужны для обеспечения работы каких-то запущенных процессов/демонов.
   Как правило - не имеют оболочки, не могут авторизоваться в системе создаются автоматически при установке приложений;
 - USERS (простые пользователи): учетные записи, которые создаются администратором ОС для работы пользователей в этой ОС.
   могут быть локальными (создаваться на самом сервере), сетевыми (хранятся в домене LDAP - аналог AD).

В ОС Linux информация об учетных записях хранится в 3 файлах:
 - /etc/passwd: содержит общую информацию об УЗ:
   LOGIN:PASSWORD(метка его наличия или отсутсвия):UID:GID(основная):DESCRIPTION:HOME_DIRECTORY:SHELL
   SHELL для пользователей, как правило - /bin/bash,
    для системных пользователей: /usr/sbin/nologin или /bin/false - не позволит авторизоваться в консоли под этой учеткой!;
 - /etc/group: содержит общую информацию о группах пользователей:
   GROUP_NAME:PASSWORD(метка):GID:UID(перечисляются все пользователи, которые входят в группу);
 - /etc/shadow: хранит информацию о паролях УЗ:
   LOGIN:PASSWORD(hash или *):
    Для усложнения подбора пароля по хешу, функция hash использует соль (salt) - некое случайно генерируется при создании хеша
    и дополняет хеш пароля.
    Первые 2 символа hash указывают на тип шифрования:
     - $1 = md5 = 22 символа;
     - $5 = sha-256 = 43 символа;
     - $6 = sha-512 = 86 символов.
    Следующие 16 символов - это соль.
    Далее следует сам hash.

    - число дней последнего изменения пароля, начиная с 1 января 1970 года:
    - число дней, перед тем как пароль может быть изменён:
    - число дней, после которых пароль должен быть изменён:
    - число дней, за сколько пользователя начнут предупреждать, что пароль устаревает:
    - число дней, после устаревания пароля для блокировки учётной записи:
    - число дней, отсчитывая с 1 января 1970 года, когда учётная запись будет заблокирована:
    - зарезервированное поле

   Для усложнения подбора пароля по хешу, функция hash использует соль (salt) - некое случайно генерируется при создании хеша
    и дополняет хеш пароля.
   Первые 2 символа hash указывают на тип шифрования:
    - $1 = md5 = 22 символа;
    - $5 = sha-256 = 43 символа;
    - $6 = sha-512 = 86 символов.
   Следующие 16 символов - это соль.
   Далее следует сам hash.

; Создание пользователя:
useradd {{ USER_NAME }}

# Создается пользователь с указанным именем, группа пользователя,
## ему назначается оболочка по умолчанию, пароль и домашняя директория не создаются:
    -s {{ SHELL_NAME }}   # задается оболочка для пользователя;
    -m                         # создать домашний каталог.
                               ## /etc/skel - содержит шаблон домашней директории;
    -b {{ HOME_DIRECTORY }}    # назначить домашний каталог (абсолютное имя домашнего каталога);
                               ## если такого каталога нет, для создания требует указать -m.

; Создать (задать)/изменить пароль пользователя:
passwd {{ USER_NAME }}

; Создание пользователя с помощью perl скрипта:
adduser {{ USER_NAME }}

# В процессе выполнения создает домашнюю директорию, группу, оболочку,  запрашивает пароль и дополнительную информацию.

; Удалить пользователя командой:
userdel {{ USER_NAME }}
# ключ -r удаляет, так же жомашнюю дерикторию пользователя.

; Удалить пользователя с помощью perl скрипта:
deluser {{ USER_NAME }}

; Создать группу пользователей:
groupadd {{ GROUP_NAME }}

; Добавить пользователя в группу:
usermod -aG {{ GROUP_NAME }} {{ USER_NAME }}
# где:
    -a        # добавить;
    -G        # дополнительные группы.

; Удалить группу пользователей командой:
groupdel  {{ GROUP_NAME }}

; Удалить группу пользователей с помощью perl скрипта:
delgroup {{ GROUP_NAME }}

------
WHOAMI

Показать имя текущего пользователя

#
whoami

; подробный вывод
who am i

--
ID

Показать к каким группам принадлежит пользователь (по умолчаню - текущий)

#
id {{ USER_NAME }}

------
GROUPS

Показывает группу по умолчанию для пользователя ( по умолчанию - текущего)

#
groups {{ USER_NAME }}
---
WHO

Показать активные сеансы пользователей

#
who

; более подробный вывод
w

----
LAST

Показать последние успешные сеансы пользователей

#
last

--------------------------------------------
ПЕРЕКЛЮЧЕНИЕ НА ДРУГОГО ПОЛЬЗОВАТЕЛЯ
ВЫПОЛНЕНИЕ ОПЕРАЦИЙ ОТ ДРУГОГО ПОЛЬЗОВАТЕЛЯ
ЗАВЕРШЕНИЕ ТЕКУЩЕЙ СЕССИИ ТЕКУЩЕГО ПОЛЬЗОВАТЕЛЯ:
--------------------------------------------
!!! Воспользоваться командой sudo могут только пользователи группы sudo.
  Эти пользователи перечислены в файле /etc/sudoers !!!
  Пользователи добавляются в этот файл с помощью утилит:
visudo
# или
sudoedit

; переключиться на пользователя root:
sudo -s
# или
sudo su

; Создать терминальную сессию под другим пользователем:
sudo - {{ USER_NAME }}

# Если команда выполняется из под root:
su - {{ USER_NAME }}

; Завершить текущую сессию текущего пользователя:
exit
# или
CTRL+D

; выполнить команду с привелигерованными правами
sudo {{ COMMAND_NAME }}

----------------------------------------------
ПРАВА ДОСТУПА К ФАЙЛАМ И КАТАЛОГАМ В ОС LINUX:
----------------------------------------------

В Linux - все есть файл.

 С каждым файлом связан индексный дескриптор (inode) - структура хранящая метаинформацию о файле:
   имена, размер, местоположение, владелец, группа, права доступа, даты и прочие атрибуты.

Права доступа к файлам обозначаются набором символов (10 шт.), который можно условно разделить на 4 группы:
tuuugggooo, где:
 - t: тип файла;
 - uuu: права для владельца файла;
 - ggg: права для группы владельца;
 - ooo: права для всех остальных (owner).

Типы файла могут обозначаться следующими символами:
 - "-": обычный файл;
 - d  : каталог;
 - b  : блочное устройство;
 - c  : символьное устройство;
 - l  : ссылка (soft link);
 - p  : именованный канал;
 - s  : сокет.

Каждая группа прав включает в себя три типа доступа к файлу - rwx:
 - чтение - read - (файла и содержимого каталога (требует x)): r = 100 = 4;
 - запись - write: w = 010 = 2;
 - выполнение - execute - (для запуска исполняемых файлов и доступа к каталогу): x = 001 = 1;
Отсутствие разрешения на какой-либо тип доступа обозначается знаком "-" или цифрой "0".
Складывая десятичные значения прав в группе можно обозначать их одной общей цифрой:
Например:
  ---: полное отсутсвие доступа = 0;
  r--: только чтение (файла) = 4;
  rw-: запись и чтение (файла) = 6;
  r-x: чтение содержимого файла и каталога, запуск исполняемого файла = 5;
  rwx: полный доступ к файлу и каталогу = 7.

В итоге, общий вид для обозначения прав на файл (каталог) для всех групп:
-rwxrwxrwx, или
drwxrwxrwx.

-----------------------------
СПЕЦИАЛЬНЫЕ БИТЫ ПРАВ ДОСТУПА
SUID, SGUID, STICKY BIT:
-----------------------------
STICKY BIT - дополнительный атрибут, который устанавливается для каталогов -
  Только владелец файла может удалить в указанном каталоге свой файл.

; установить sticky bit
chmod +t {{ DIRECTORY_NAME }}
# или
chmod 1{{ UGO }} {{ DIRECTORY_NAME }}

; снять sticky bit
chmod +t {{ DIRECTORY_NAME }}
# или
chmod 0{{ UGO }} {{ DIRECTORY_NAME }}

------
CHMOD:

Для назначения/смены прав на файл/каталог:

chmod {{ RIGHTS }} {{ FILE_or_DIR }};

Права можно указывать следующими способами:
XYZ, где:
- X: для кого модифицируются права = u, g или o - если не указывать кому = всем;
- Y: добавить/убрать = +/-;
- Z: тип доступа = r, w, x - можно указывать несколько типов доступа сразу.

Например:
chmod a+rx FILE_NAME1        # добавить всем остальным права на чтение и запуск исполняемого файла с именем "FILE_NAME1".

Или цифровым обозначением прав для каждой группы, например:
chmod 754 FILE_NAME1        # что равно = -rwxr-xr--.

------
CHOWN:

Смена владельца/группы владельца на файл/каталог:

; Сменить владельца файла/каталога:
chown {{ USER_NAME }} {{ FILE_or_DIR }}
#или:
chown {{ USER_NAME }}:{{ GROUP_NAME }} {{ FILE_or_DIR }}
      -R        # ключ добавляемый при смене владельца/группы каталога для рекурсивного назначения всему содержимому.

------
CHGRP:

Сменить группу владельца файла/каталога:
chgrp {{ USER_NAME }} {{ FILE_or_DIR }}

------
CHROOT

Смена корневой (/) директории

#
chroot {{ ROOT_PATH }} {{ APP_PATH }}

-------------------------------------------------------
НАВИГАЦИЯ В СИСТМЕ, СОЗДАНИЕ ФАЙЛОВ И КАТАЛОГОВ, ПОИСК:
-------------------------------------------------------

---
PWD
Вывести полное название текущей директории (print work DIRECTORY_NAME):

#
pwd

--
LS
Вывод содержимого директории (list):

#
ls [OPTIONS] {{ DIRECTORY_NAME }}

; вывести содержимое текущей дериктории
ls

; подробный вывод списком
ls -l

; отобразить, в том числе, скрытые (системные) файлы (имя начинается с символа "."), включая жесткие ссылки на текущий и родительский каталоги
ls -a

; отобразить, в том числе, скрытые (системные) файлы (имя начинается с символа ".")
ls -A
    
; показать типы файлов
ls -F
  # символы определяющие тип файла:
    "/"    # каталог;
    "@"    # мягкая ссылка;
    ""     # обычный файл.

; показывать номера inode файлов
ls -i

; рекурсивно показать содержимое директории
ls -R

; показать подробные сведения о текущей дериктории
ls -ld

; показать человекочитаемый размер файлов
ls -lh

; сортировать по размеру файлов
ls -s

-----
TOUCH
Создать файл или обновить время обращения к существующему файлу:

#
touch {{ FILE_NAME }}

--
LN

Cоздать жесткую или символическую (мягкую) ссылку на файл.
 # Жесткая ссылка - это еще одно имя файла - новое место не занимает, файл имеет один и тот же inode для всех жестких ссылок.
 ## Нельзя создавать жесткие ссылки на директории (системные ЖС для директорий - ".", "..")
 ## Все ЖС к файлу должны располагаться на одном разделе.

#
ln [OPTIONS] {{ SRS_FILE_or_DIR }} {{ LINK_NAME }}

; создать жесткую ссылку на файл
ln {{ SRS_FILE_or_DIR }}

; задать имя создаваемой ссылки на файл (target)
ln -T {{ SRS_FILE_or_DIR }} {{ LINK_NAME }}

; создать символическую ссылку на файл
 # Символическая (мягкая) ссылка на файл - это еще один (новый, отдельный) файл, который содержит линк до целевого файла
 ## Занимает место, inode, может ссылкаться на файлы на других разделах (носителях).
 ## Бьется если целевой файл меняет свое абсолютное имя.
 ## При создании желаетльно указывать абсолютное имя целевого файла.
ln -s {{ SRS_FILE_or_DIR }}

-----
MKDIR

Создать директорию (make DIRECTORY_NAME):

#
mkdir [OPTIPNS] {{ DIRECTORY_NAME }}

; создать директорию, включая родительские
mkdir -p {{ PARENT_DIRECTORY/CHILD_DIRECTORY }}

--
CP

Скопировать файл или директорию (copy)

#
cp [OPTIPNS] {{ SRC_FILE_or_DIR }} {{ DST_FILE_or_DIR }}

; рекурсивно копировать
cp -r

; выводить список копируемого
cp -v

--
MV

Переместить или переименовать файл или директорию (move):

#
mv [OPTIPNS] {{ SRC_FILE_or_DIR }} {{ DST_FILE_or_DIR }}
 
; рекурсивно перемещать
mv -r

; выводить список перемещаемого
mv -v

-----
RMDIR

Удалить пустую директорию

#
rmdir [OPTIPNS] {{ DIRECTORY_NAME }}

--
RM

Удалить файл или директорию (remove):

#
rm [OPTIPNS] {{ FILE_or_DIR }}

; рекурсивное удаление директории со всем содержимым (recursion)
rm -r {{DERECTORY_NAME }}

; выводить список удаляемого (verbose)
rm -v

; не запрашивать подтверждение на удаление (force)
rm -f

; запрашивать перед удалением
rm -i

------
LOCATE

Быстрый поиск файла в системе по системной БД
 # обновление БД выполняется командой `sudo updatedb`
 # требуется наличие пакета "plocate"

#
locate [OPTION] {{ FILE_NAME }}

----
FIND

Поиск файлов по заданным параметрам (по умолчанию - рекурсивный)

#
find {{ PATH }} [OPTIONS] {{ EXPRESSIONS }}

; искать в текущей дериктории
find . [OPTIONS] {{ EXPRESSIONS }}

; искать по типу файла
find {{ PATH }} -type {{ TYPE_FILE }}
  f    # файл;
  d    # директория;
  l    # ссылка;     
  s    # сокет;
  p    # FIFO (именованный канал);

; искать по имени
find {{ PATH }} -name {{ FILE_NAME }}

------------------
РАБОТА С АРХИВАМИ:
------------------

Архиваторы (в ос семейства linux) не сжимают файлы, они создают один файл, который включает в себя все указанные файлы.
Компрессоры - сжимают файлы, созданные архиваторами.

---
TAR

Архиватор

#
tar -f [ OPTIONS ] {{ ARCHIVE_NAME }}.tar {{ TARGET_FILES }}
 # обязательно указывать ключ "-f" он позволяет передать на вход команде tar целевой файл,
 ## ключ "-f" всегда указывается последним из всех опций.
 ## Опции можно перечислять без знака "-" перед ними
 
; создать архив (CREATE)
tar -cf {{ ARCHIVE_NAME }}.tar {{ TARGET_FILES }}

; распаковать архив (EXTRACT)
tar -xf {{ ARCHIVE_NAME }}.tar

; просмотреть содержимое архива (TEST)
tar -tf {{ ARCHIVE_NAME }}.tar

; вывод обрабатываемях файлов при упаковке/распаковке (VERBOSE)
tar -cvf/xvf {{ ARCHIVE_NAME }}.tar {{ TARGET_FILES }}

; создать tar архив и выполнить сжатие с помощью gzip
tar -czf {{ ARCHIVE_NAME }}.tar.gz {{ TARGET_FILES }}

; создать tar архив и выполнить сжатие с помощью bzip2
tar -czf {{ ARCHIVE_NAME }}.tar.bz2 {{ TARGET_FILES }}

; создать tar архив и выполнить сжатие с помощью xz
tar -czf {{ ARCHIVE_NAME }}.tar.xz {{ TARGET_FILES }}

---------------
GZIP, BZIP2, XZ

Компрессоры

#
gzip/bzip2/xz [OPTIONS] {{ TARGET_FILES }}

; декомпрессия (разжатие)
gunzip/bunzip2/unxz {{ ARCHIVE_NAME }}

---
ZIP

Архиватор и компрессор - сразу архивирует и сжимает

#
zip [OPTIONS] {{ ARCHIVE_NAME }}.zip {{ TARGET_FILES }}

; распаковать
unzip {{ ARCHIVE_NAME }}

----------------------------------
УПРАВЛЕНИЕ ДИСКОВЫМ ПРОСТРАНСТВОМ:
----------------------------------

-----
FDISK

Программа обслуживания разделов дисковых устройств.

#
fdisk [OPTIONS] {{ DEVICE_PATH }}

; Вывести список всех дисковых устройств:
fdisk -l

---------
ПРОЦЕССЫ:
---------

Процесс - некоторая совокупность программного кода, который выполняется в памяти компьютера.

Бывают:
- Пользовательские - запущены пользователем;
- Системные - порождаются ядром ОС во время загрузки и выполняют системные функции.
   Выполняемые такими процессами программы - появляются не из исполняемого файла а являются частью ядра;
- Демоны - запускаются после инициализации ядра, работают в фоновом режиме и не привязаны к терминалу.
   Как правило имена процессов демонов заканчиваются на "d".

С точки зрения ядра - процесс представляет собой запись в таблице процессов.

Таблица процессов - специальная структура данных которая записывает все процессы запущенные в данный момент в ОС
 - их атрибуты, состояния строку команд.

---
LDD
Посмотреть какие библиотеки требуются приложению для его работы.

Например, если требуется перенести приложение в другую директорию для дальнейшего chroot.

#
ldd {{ APP_PATH }}

------
STRACE

Средство трассировки(распечатки) системных вызовов, полезно для выявления ошибок.

#
; Начать трассировку процесса, заданного идентификатором(PID):
strace -p {{ PID_NUMBER }}

; Трассировать процесс с фильтрацией выдач по определённому системному вызову:
strace -p {{ PID_NUMBER }} -e {{ SYSCALL_NAME }}

; Вывести при завершении программы таблицу, содержащую число обращений, ошибок и затраченное время по каждому из системных вызовов:
strace -p {{ PID_NUMBER }} -c

; Отображать при трассировке время, затраченное системным вызовом:
strace -p {{ PID_NUMBER }} -T

; Начать трассировку одновременно с выполнением программы:
strace {{ APP_NAME }}
#

------
LTRACE

Выводит список вызванных процессом функций из разделяемых библиотек

#
; Вывести трассировку вызовов библиотек при выполнении программы:
ltrace {{ APP_NAME }}

; Подсчитать количество вызовов библиотек, вывести итоговую таблицу при завершении процесса:
ltrace -c {{ APP_PATH }}

; Трассировать вызовы функций malloc и free, кроме тех, что были вызваны из библиотеки libc:
ltrace -e malloc+free-@libc.so* {{ APP_PATH }}

; Вывод в файл (не на терминал):
ltrace -o {{ FILE_NAME }} {{ APP_PATH }}
#

--
PS

Вывести моментальный снимок текущих процессов.
# по умолчанию выводит процессы текущей оболочки

#
ps [options]

; OPTIONS:
  a/e  # выбрать все процессы, кроме фоновых;
  u    # выбрать процессы пользователя;
  x    # ;
  f    # показывает полную информацию о процессах.

Ctrl+Z - отправить процесс на background
Ctrl+C - прекратить процесс вообще

---
TOP

Интерактивный онлайновый диспетчер задач

#
top

; HOT_KEYS:
  [1]        # показывает нагрузку на каждый cpu отдельно, или отключает вывод о нагрузке cpu;
  [p]        # псевдографически отображает нарузку на процессор ввиде шкалы, или отключает вывод;
  [m]        # псевдографически отображает загрузку оперативной памяти ввиде шкалы, или отключает вывод;
  [CTRL+z]   # завершение top.

----  
FREE

Показать состояние памяти в байтах
 # отобраает значения для RAM и SWAP

#
free

; показать состояние памяти в MB, GB
free -h

; ПАРАМЕТРЫ ИНТЕРФЕЙСА:

 - total           # всего памяти;
 - used            # общая используемая память;
 - free            # сколько памяти "свободно" - не требуется, излишек;
 - shared          # сколько памяти используется совместно (общие библиотеки, процессы);
 - buff/cache      # сколько используется памяти для буфера и кеша;
 - available       # сколько памяти доступно.

-----
PKILL

Поиск, отправка сигналов или ожидание процессов на основе имени и других атрибутов

#
pkill [OPTIONS] {{ PATTERN }}

; Используйте команду kill -l для получения списка всех доступных сигналов.
; Наиболее часто используемые сигналы:
 - 1(HUP): перезагрузить процесс.
 - 9(KILL): убить процесс.
 - 15(TERM): изящно остановить процесс.

; Завершить (убить) конкретную сессию пользователя:
pkill -9 -t {{ TTY_NAME }}




=========


  
  
-------------------
СВЕДЕНИЯ О СИСТЕМЕ:
-------------------
------  
UPTIME

Показывает, как долго работает система
# Также показывает:
  - текущее время на сервере;
  - количество активных пользовательских сеансов;
  - текущий load average.

-----
UNAME

Вывести информацию о текущей системе
 # По умолчанию выводит только имя ядра (Linux)

#
uname [OPTION]

; Вывести подробные сведения о системе (ядро, имя хоста, поддерживаемые архитектуры, текущие дату и время, и т. д.)
uname -a

-----
LSCPU

Вывести подробные сведения об архитектруре процессора

#
lscpu






--
WC

Вывести количество строк, слов, байт в файле

#
wc [OPTIONS] {{ FILE_NAME }}

; вывести количество строк
wc -l

; вывести количество слов
wc -w

; вывести количество байт
wc -c

---
CUT 

Вырезать определенные поля из каждой строки файла

#
cut [OPTIONS] {{ FILE_NAME }}

; указать делиметр (по какому разделителю выбирать поля)
cut -d "{{ DELIMITER_NAME }}"
 # например:
   cut -d ":"        # разделителем в пределах каждой строки файла будут ситаться все символы ":"

; указать номер поля, относительно разделителей (первым полем считается вся часть перед первым разделителем,
  далее нумерация полей между разделителями)
cut -f {{ FIELD_NUMBER }}

----
SORT

Вывести отсортированный текст
 # По умолчанию использует порядок сортировки, заданный в настройках системного языка.

#
sort [OPTIONS] {{ FILE_NAME }}

----
GREP

Ввод строк, соответствующих шаблону (регулярные выражения)

#
grep [OPTIONS] {{ PATTERN }} {{ FILE_NAME }}

; REGEXP:

  []                      # любой из перечисленных символов (цифры, буквы, спецсимволы), интервал задается знаком "-",
                          ## например, любой из строчных букв: [a-z];
  .                       # любой символ;
  ?                       # любой символ или его отсутствие;
  {{ PATTERN}}*           # любое количество повторений указанного шаблона;
  \{{ SPEC_CHARACTERS}}   # экранирование спецсивола, что бы он воспринимался как текст.







--------
IFCONFIG

Конфигурирование параметров сетевого интерфейса
# по умолчанию выводит параметры активных сетевых интерфейсов

#
ifconfig
# или
ip addr show

-----
ROUTE

Управление таблицами маршрутизации

#
route

----
PING

Посылка пакетов ICMP ECHO_REQUEST сетевым хостам (по умолчанию бесконечна)

#
ping {{ IP_or_FQDN }}

; послать ограниченное количество запросов (COUNT)
ping -c

----
HOST

Утилита поиска информации по IP из DNS

#
host {{ FQDN }}

; альтернатива - более подробный вывод
dig {{ FQDN }}

-------
NETSTAT

выдать сетевые подключения компьютера


wget - скачать файл из интернета
Ubuntu/Debian/Kali/Mint Linux:
apt-get install
- скачать и установить программу
apt-get remove
- удалить программу
dpkg -i
- установить программу из файла .deb
dpkg -r
- удалить программу
Red Hat/Centos Linux:
yum install
- скачать и установить программу
yum remove
- удалить программу
rpm -i
- установить программу из файла .rpm
rpm -e
- удалить программу
