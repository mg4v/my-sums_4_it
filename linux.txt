

------------------------------------------
ВЗАИМОДЕЙСТВИЕ С КОМАНДНОЙ ОБОЛОЧКОЙ BASH:
------------------------------------------

; Вызов командной оболочки в GUI:
 CTRL+ALT+t
; Переключиться на виртуальный терминал:
 CTRL+ALT+{{ FUNCTION-KEY_NUMBER }}
   # Как правило в ОС существует 7 виртуальных терминалов:
     - с 1 по 6: текстовые, а 7 - GUI.
-----
CLEAR
Очистить содержимое терминала:
# На самом деле - просто смещается на один экран вниз!
 CTRL+l        # альтернативная комбинация клавиш для вызова CLEAR;
 
----
EXIT
Выйти из текущего сеанса (текущего пользователя):
  CTRL+d        # альтернативная комбинация клавиш для вызова EXIT;
 
-------------------------------
СТАНДАРТНЫЕ ПОТОКИ ВВОДА/ВЫВОДА
STDIN, STDOUT, STDERR:
-------------------------------

ТЕРМИНАЛ - оконечное (физическое) устройство, предназначенное для взаимодействия оператора и компютера.
 Терминал подключался к ЭВМ. Таких терминалов могло быть несколько.
 Терминал может быть запущен удаленно;

ЭМУЛЯТОР ТЕРМИНАЛА - "программный" терминал, эмулирующий работу "физического" терминала;
 Для каждого сеанса пользователя создается отдельный терминал.

КОНСОЛЬ - совокупность устройств ввода/вывода для передачи оператором команд и вывода компьютером результатов.
 Консоль всегда подключена к текущему РМ.

КОМАНДНЫЙ ИНТЕРПРЕТАТОР - программа позволяющая передавать команды пользователя компьютеру.
 В большинстве современных дистрибутивов linux командным интерпретатором по умолчанию является - bash.

КОНСОЛЬ --> ТЕРМИНАЛ --> BASH

Для взаимодействия запускаемых программ с пользователем используются стандартные потоки ввода/вывода:
 - STDIN (0): стандартный поток ввода, по умолчанию настроен на устройство ввода текущей консоли;
 - STDOUT (1): стандартный поток вывода, по умолчанию настроен на устройство вывода текущей консоли;
 - STDERR (2): стандартный поток ошибок, по умолчанию настроен на устройство вывода текущей консоли;

Важно понимать, что в Linux - все есть файл!
 Соответственно - стандартные потоки, это специальные файлы, которые открываются на чтение или запись.
 Именно поэтому мы можем использовать вместо стандартной консоли файлы.

; Передача потока вывода в файл:
{{ COMMAND }}  > {{ FILE_NAME }}            # перезаписывает содержимое файла, либо создает новый если нет с таким именем;
{{ COMMAND }}  >> {{ FILE_NAME }}            # добавляет вывод в конец существующего файла;

По умолчанию в файл передается поток STDOUT, а STDERR выводится на экран.
; Передача потока ошибок в файл:
{{ COMMAND }} 2 }} {{ FILE_NAME }}

; Объединение потоков вывода и передача их в файл:
{{ COMMAND }} 2 }}&1 {{ FILE_NAME }}

КОНВЕЙЕР - передача результатов предыдущей команды (STDOUT) в текущую:
{{ COMMAND_1 }} | {{ COMMAND_2 }} | ... | {{ COMMAND_N }}

---------------------------------
ПОЛЬЗОВАТЕЛИ И ГРУППЫ В ОС LINUX:
---------------------------------

Linux -  многопользовательская операционная система.
 Каждый процесс в пользовательском пространстве выполняется от имени того или иного пользователя.
 Поддержка прав на чтение/запись/выполнение поддерживается на уровне файловой системы,
  и позволяет гибко настраивать доступ к файлам отдельных пользователей и пользовательских групп.

ПОЛЬЗОВАТЕЛЬ - входит в систему, проходит процедуру авторизации и идентифицируется с какой-то учетной записью.
УЧЕТНАЯ ЗАПИСЬ - хранит информацию о пользователе, предназначенную для его опознания и предоставления
 доступа к его личным данным и настройкам.
ПРАВА ДОСТУПА - совокупность правил которые регламентирую порядок и условия доступа какого-то субъекта
(например пользователя) к объектам информационной системы (например файлам).
ГРУППА - именованная группа пользователей с одинаковыми правами доступа к тем или иным объектам ИС.
 Группы необходимы для организации нескольких пользователей к различным ресурсам.

Каждый пользователь имеет 2 основных атрибута:
 - UID (User identifier - идентификатор пользователя): ОС различает пользователей именно по UID!
   это число из диапазона 0 - 65535.
 - GID (Group identifier - идентификатор группы): Каждый пользователь в ОС принадлежит, как минимум, к 1 группе пользователей.
   При создании пользователя, по умолчанию создается группа для него. Как правило, имя группы пользователя по умолчанию
    совпадает с его именем. Пользователь может принадлежать к нескольким группам.

Условно можно разделить пользователей на 3 типа:
 - ROOT: суперпользователь (superuser): имеет неограниченные права в ОС.
   UID:GID = 0:0.
   Предназначен для работы с системными файлами, службами и всеми объектами, которые влияют на работу ОС;
 - SYSTEM USERS (Системные пользователи): нужны для обеспечения работы каких-то запущенных процессов/демонов.
   Как правило - не имеют оболочки, не могут авторизоваться в системе создаются автоматически при установке приложений;
 - USERS (простые пользователи): учетные записи, которые создаются администратором ОС для работы пользователей в этой ОС.
   могут быть локальными (создаваться на самом сервере), сетевыми (хранятся в домене LDAP - аналог AD).

В ОС Linux информация об учетных записях хранится в 3 файлах:
 - /etc/passwd: содержит общую информацию об УЗ:
   LOGIN:PASSWORD(метка его наличия или отсутсвия):UID:GID(основная):DESCRIPTION:HOME_DIRECTORY:SHELL
   SHELL для пользователей, как правило - /bin/bash,
    для системных пользователей: /usr/sbin/nologin или /bin/false - не позволит авторизоваться в консоли под этой учеткой!;
 - /etc/group: содержит общую информацию о группах пользователей:
   GROUP_NAME:PASSWORD(метка):GID:UID(перечисляются все пользователи, которые входят в группу);
 - /etc/shadow: хранит информацию о паролях УЗ:
   LOGIN:PASSWORD(hash или *):
    Для усложнения подбора пароля по хешу, функция hash использует соль (salt) - некое случайно генерируется при создании хеша
    и дополняет хеш пароля.
    Первые 2 символа hash указывают на тип шифрования:
     - $1 = md5 = 22 символа;
     - $5 = sha-256 = 43 символа;
     - $6 = sha-512 = 86 символов.
    Следующие 16 символов - это соль.
    Далее следует сам hash.

    - число дней последнего изменения пароля, начиная с 1 января 1970 года:
    - число дней, перед тем как пароль может быть изменён:
    - число дней, после которых пароль должен быть изменён:
    - число дней, за сколько пользователя начнут предупреждать, что пароль устаревает:
    - число дней, после устаревания пароля для блокировки учётной записи:
    - число дней, отсчитывая с 1 января 1970 года, когда учётная запись будет заблокирована:
    - зарезервированное поле

   Для усложнения подбора пароля по хешу, функция hash использует соль (salt) - некое случайно генерируется при создании хеша
    и дополняет хеш пароля.
   Первые 2 символа hash указывают на тип шифрования:
    - $1 = md5 = 22 символа;
    - $5 = sha-256 = 43 символа;
    - $6 = sha-512 = 86 символов.
   Следующие 16 символов - это соль.
   Далее следует сам hash.

; Создание пользователя:
useradd {{ USER_NAME }}

# Создается пользователь с указанным именем, группа пользователя,
## ему назначается оболочка по умолчанию, пароль и домашняя директория не создаются:
    -s {{ SHELL_NAME }}   # задается оболочка для пользователя;
    -m                         # создать домашний каталог
    -b {{ HOME_DIRECTORY }}        # назначить домашний каталог (абсолютное имя домашнего каталога).
                               ## если такого каталога нет, для создания требует указать -m.

; Создать (задать)/изменить пароль пользователя:
passwd {{ USER_NAME }}

; Создание пользователя с помощью perl скрипта:
adduser {{ USER_NAME }}

# В процессе выполнения создает домашнюю директорию, группу, оболочку,  запрашивает пароль и дополнительную информацию.

; Удалить пользователя командой:
userdel {{ USER_NAME }}

; Удалить пользователя с помощью perl скрипта:
deluser {{ USER_NAME }}

# где:
    -a        # добавить;
    -G        # дополнительные группы.


; Создать группу пользователей:
groupadd {{ GROUP_NAME }}

; Добавить пользователя в группу:
usermod -aG {{ GROUP_NAME }} {{ USER_NAME }}

; Удалить группу пользователей командой:
groupdel  {{ GROUP_NAME }}

; Удалить группу пользователей с помощью perl скрипта:
delgroup {{ GROUP_NAME }}


--------------------------------------------
ПЕРЕКЛЮЧЕНИЕ НА ДРУГОГО ПОЛЬЗОВАТЕЛЯ
ВЫПОЛНЕНИЕ ОПЕРАЦИЙ ОТ ДРУГОГО ПОЛЬЗОВАТЕЛЯ
ЗАВЕРШЕНИЕ ТЕКУЩЕЙ СЕССИИ ТЕКУЩЕГО ПОЛЬЗОВАТЕЛЯ:
--------------------------------------------
!!! Воспользоваться командой sudo могут только пользователи группы sudo.
  Эти пользователи перечислены в файле /etc/sudoers !!!
  Пользователи добавляются в этот файл с помощью утилит:
visudo
# или
sudoedit

; переключиться на пользователя root:
sudo -s
# или
sudo su

; Создать терминальную сессию под другим пользователем:
sudo - {{ USER_NAME }}

# Если команда выполняется из под root:
su - {{ USER_NAME }}

; Завершить текущую сессию текущего пользователя:
exist
# или
CTRL+D

----------------------------------------------
ПРАВА ДОСТУПА К ФАЙЛАМ И КАТАЛОГАМ В ОС LINUX:
----------------------------------------------

В Linux - все есть файл.

 С каждым файлом связан индексный дескриптор (inode) - структура хранящая метаинформацию о файле:
   имена, размер, местоположение, владелец, группа, права доступа, даты и прочие атрибуты.

Права доступа к файлам обозначаются набором символов (10 шт.), который можно условно разделить на 4 группы:
tuuugggooo, где:
 - t: тип файла;
 - uuu: права для владельца файла;
 - ggg: права для группы владельца;
 - ooo: права для все остальных (owner).

Типы файла могут обозначаться следующими символами:
 - "-": обычный файл;
 - d  : каталог;
 - b  : блочное устройство;
 - c  : символьное устройство;
 - l  : ссылка (soft link);
 - p  : именованный канал;
 - s  : сокет.

Каждая группа прав включает в себя три типа доступа к файлу - rwx:
 - чтение - read - (файла и содержимого каталога (требует x)): r = 100 = 4;
 - запись - write: w = 010 = 2;
 - выполнение - execute - (для запуска исполняемых файлов и доступа к каталогу): x = 001 = 1;
Отсутствие разрешения на какой-либо тип доступа обозначается знаком "-" или цифрой "0".
Складывая десятичные значения прав в группе можно обозначать их одной общей цифрой:
Например:
  ---: полное отсутсвие доступа = 0;
  r--: только чтение (файла) = 4;
  rw-: запись и чтение (файла) = 6;
  r-x: чтение содержимого файла и каталога, запуск исполняемого файла = 5;
  rwx: полный доступ к файлу и каталогу = 7.

В итоге, общий вид для обозначения прав на файл (каталог) для всех групп:
-rwxrwxrwx, или
drwxrwxrwx.

-----------------------------
СПЕЦИАЛЬНЫЕ БИТЫ ПРАВ ДОСТУПА
SUID, SGUID, STICKY BIT:
-----------------------------
STICKY BIT - дополнительный атрибут, который устанавливается для каталогов -
  Только владелец файла может удалить в указанном каталоге свой файл.

; Установить sticky bit:
chmod +t {{ DIRECTORY_NAME }}
# или:
chmod 1755 {{ DIRECTORY_NAME }}      # числа после первой единицы просто обозначают права для uga.

------
CHOMOD:

Для назначения/смены прав на файл/каталог:

chmod {{ RIGHTS }} {{ FILE_or_DIR }};

Права можно указывать следующими способами:
XYZ, где:
- X: для кого модифицируются права = u, g или o - если не указывать кому = всем;
- Y: добавить/убрать = +/-;
- Z: тип доступа = r, w, x - можно указывать несколько типов доступа сразу.

Например:
chmod a+rx FILE_NAME1        # добавить всем остальным права на чтение и запуск исполняемого файла с именем "FILE_NAME1".

Или цифровым обозначением прав для каждой группы, например:
chmod 754 FILE_NAME1        # что равно = -rwxr-xr--.

------
CHOWN:

Смена владельца/группы владельца на файл/каталог:

; Сменить владельца файла/каталога:
chown {{ USER_NAME }} {{ FILE_or_DIR }}
#или:
chown {{ USER_NAME }}:{{ GROUP_NAME }} {{ FILE_or_DIR }}
      -R        # ключ добавляемый при смене владельца/группы каталога для рекурсивного назначения всему содержимому.

------
CHGRP:

Сменить группу владельца файла/каталога:
chgrp {{ USER_NAME }} {{ FILE_or_DIR }}

---
PWD
Вывести полное название текущей директории (print work DIRECTORY_NAME):

 pwd

-----
TOUCH
Создать файл или обновить время обращения к существующему файлу:

 touch {{ FILE_NAME }}

--
LS
Вывод содержимого директории (list):

 ls                       # текущей директории;
       {{ DIRECTORY_NAME }}        # указанной директории;
    -l                    # подробный вывод списком;

--
RM
Удалить файл или директорию (remove):

rm    {{ FILE_or_DIR }}        # удаляет только пустую директорию!
   -r                      # рекурсивное удаление директории со всем содержимым (recursion);


-----
MKDIR
Создать директорию (make DIRECTORY_NAME):

 mkdir {{ DIRECTORY_NAME }}

--
MV
Переместить или переименовать файл или директорию (move):

 mv {{ SRC_FILE_or_DIR }} {{ DST_FILE_or_DIR }}

--
CP
Скопировать файл или директорию (copy):

 cp {{ SRC_FILE_or_DIR }} {{ DST_FILE_or_DIR }}

--
CD
Смена текущего каталога (change DIRECTORY_NAME):

 cd                   # перейти в домашнюю директорию текущего пользователя;
       {{ DIRECTORY_NAME }}    # перейти в указанную директорию;
    ..                # перейти в родительский каталог;


---------
ПРОЦЕССЫ:
---------

Процесс - некоторая совокупность программного кода, который выполняется в памяти компьютера.

Бывают:
- Пользовательские - запущены пользователем;
- Системные - порождаются ядром ОС во время загрузки и выполняют системные функции.
   Выполняемые такими процессами программы - появляются не из исполняемого файла а являются частью ядра;
- Демоны - запускаются после инициализации ядра, работают в фоновом режиме и не привязаны к терминалу.
   Как правило имена процессов демонов заканчиваются на "d".

С точки зрения ядра - процесс представляет собой запись в таблице процессов.

Таблица процессов - специальная структура данных которая записывает все процессы запущенные в данный момент в ОС
 - их атрибуты, состояния строку команд.



---
LDD
Посмотреть какие библиотеки требуются приложению для его работы.

Например, если требуется перенести приложение в другую директорию для дальнейшего chroot.

#
ldd {{ APP_PATH }}
#

------
CHROOT

Смена корневой (/) директории

#
chroot {{ ROOT_PATH }} {{ APP_PATH }}
#
---------
NAMESPACE

Механизм пространств имён
Пространство имён (англ. namespace) — это механизм ядра Linux, обеспечивающий изоляцию процессов друг от друга.
 Работа по его реализации была начата в версии ядра 2.4.19.
 На текущий момент в Linux поддерживается шесть типов пространств имён:
 - PID	PID процессов - создание нового (изолированного для находящихся в нем дочерних процессов) дерева процессов.
 - NETWORK	Сетевые устройства, стеки, порты и т.п.
   Благодаря пространству имён NET мы можем выделять для изолированных процессов собственные сeтевые интерфейсы.
   Даже loopback-интерфейс для каждого пространства имён будет отдельным.

 - USER	ID пользователей и групп
 - MOUNT	Точки монтирования - изолированная файловая система
 - IPC	SystemV IPC, очереди сообщений POSIX
 - UTS	Имя хоста и доменное имя NIS
   UTS используется для изоляции системных идентификаторов: имени узла (nodename) и имени домена (domainame),
    возвращаемых системным вызовом uname().
  Все эти типы используются современными системами контейнеризации (Docker, LXC и другими) при запуске программ.


------
STRACE

Средство трассировки(распечатки) системных вызовов, полезно для выявления ошибок.

#
; Начать трассировку процесса, заданного идентификатором(PID):
strace -p {{ PID_NUMBER }}

; Трассировать процесс с фильтрацией выдач по определённому системному вызову:
strace -p {{ PID_NUMBER }} -e {{ SYSCALL_NAME }}

; Вывести при завершении программы таблицу, содержащую число обращений, ошибок и затраченное время по каждому из системных вызовов:
strace -p {{ PID_NUMBER }} -c

; Отображать при трассировке время, затраченное системным вызовом:
strace -p {{ PID_NUMBER }} -T

; Начать трассировку одновременно с выполнением программы:
strace {{ APP_NAME }}
#

------
LTRACE

Выводит список вызванных процессом функций из разделяемых библиотек

#
; Вывести трассировку вызовов библиотек при выполнении программы:
ltrace {{ APP_NAME }}

; Подсчитать количество вызовов библиотек, вывести итоговую таблицу при завершении процесса:
ltrace -c {{ APP_PATH }}

; Трассировать вызовы функций malloc и free, кроме тех, что были вызваны из библиотеки libc:
ltrace -e malloc+free-@libc.so* {{ APP_PATH }}

; Вывод в файл (не на терминал):
ltrace -o {{ FILE_NAME }} {{ APP_PATH }}
#


-----
PKILL

Поиск, отправка сигналов или ожидание процессов на основе имени и других атрибутов

#
pkill [OPTIONS] {{ PATTERN }}

; Используйте команду kill -l для получения списка всех доступных сигналов.
; Наиболее часто используемые сигналы:
 - 1(HUP): перезагрузить процесс.
 - 9(KILL): убить процесс.
 - 15(TERM): изящно остановить процесс.

; Завершить (убить) конкретную сессию пользователя:
pkill -9 -t {{ TTY_NAME }}

-----
FDISK

Программа обслуживания разделов дисковых устройств.

; Вывести список всех дисковых устройств:
fdisk -l


=========

---------------------
СИСТЕМНЫЕ ПЕРЕМЕННЫЕ:
- $PATH    # содржит перечень путей в которых ОС ищет исполняемые и справочные файлы программ;

---
MAN

Подробное справочное руководство по коммандам

#
man [OPTIONS] {{ COMMAND_NAME }}

; показывает краткое описание команд, содержащих указанное СЛОВО:
man -k {{ COMMAND_NAME }}

; показывает конкретный раздел справки по указанной команде:
man {{ SECTION_NUMBER }} {{ COMMAND_NAME }}

; НАВИГАЦИЯ:
  [ENTER]                # Листать страницу на одну строку вниз;
  [SPACE]                # Листать страницу на один экран вниз;
  [b]                    # Листать страницу на один экран вверх;
  [p]                    # Вернуться в начало инструкции;
  [/]{{ KEY_WORD }}      # Искать все вхождения указанного СЛОВА в текущем справочном руководстве;
  [n]                    # Перейти к слодующему вхождению {{ KEY_WORD }};
  [q]                    # Выйти из справки.
  
----
INFO

Онлайновое подробное справочное руководство по командам в гипертекстовом формате

#
info [OPTION] {{ COMMAND_NAME }}

; НАВИГАЦИЯ:
  [SPACE]                # Листать страницу на один экран вниз;
  [b]                    # Вернуться в начало инструкции;
  [TAB]                  # Перемещаться по разделам справки (помечены знаком "*");
  [/]{{ KEY_WORD }}      # Искать все вхождения указанного СЛОВА в текущем справочном руководстве;
  [n]                    # Перейти к слодующему вхождению {{ KEY_WORD }};
  [q]                    # Выйти из справки.
  
  
------  
UPTIME

Показывает, как долго работает система
# Также показывает:
  - текущее время на сервере;
  - количество активных пользовательских сеансов;
  - текущий load average.

-----
UNAME

Вывести информацию о текущей системе
 # По умолчанию выводит только имя ядра (Linux)

#
uname [OPTION]

; Вывести подробные сведения о системе (ядро, имя хоста, поддерживаемые архитектуры, текущие дату и время, и т. д.)
uname -a

-----
LSCPU

Вывести подробные сведения об архитектруре процессора

#
lscpu


whatis - показывает что делает команда
whereis - показывает где файл
locate - показывает где файл
ls - показать что в этой директории
ls -la -R / - показать все на компьютере
Ctrl+Z - отправить процесс на background
Ctrl+C - прекратить процесс вообще

cd - сменить директорию
Is - вывести содержимое директории
pwd - вывести путь где мы сейчас
- - сокращение нашей Home директории
- коренная директория Linux
- директория которая выше
- директория где мы сейчас

touch - создать файл или обновить время
ср - скопировать файл
mv - перенести файл или переименовать
rm - стереть файл

mkdir - создать директорию
rmdir - стереть пустую директорию
ср - копировать директорию
mv - переименовать или перенести директорию
rm -R - стереть не пустую директорию
со всем что внутри
sudo rm -R / - замочить систему Linux

In - создать дубликат файла
Ins - создать symbolic линк на файл
или директорию типа Shortcut

find - найти файл
wc - вывести количество строк, слов, байт
cut - вывести определенное поле из текста
sort - вывести отсортированный текст

grep - поиск определенного слова в файле
и вывод строк с этим словом
Регулярные Выражения:
[A-Z]* - любое слово из больших букв
[0-9]* - сколько угодно подряд стоящих цифр
[A-Za-z]*@[A-Za-z]*.com - простое выражение
емайлов с окончанием .com
www\.[a-z]*\.com - любой веб адрес
с окончанием .com

tar cf tar.tar Folder1 - заархивировать Folder1
tar xf tar.tar - разархивировать архив
gzip / bzip2 / xz - скомпрессировать файл
gunzip / bunzip2 / unxz - раскомпрессировать файл
tar cvzf myBZIP2.bz2 Folder1 - сжать Folder1
tar xvf my BZIP2.bz2
- распаковать архив
tar tf myBZIP2.bz2 -
посмотреть что внутри архива
zip -r myZIP.zip Folder1 - Запаковать Folder1 в ZIP
unzip myZIP.zip
- Распаковать файл myZIP.zip

top - как Task Manager в Windows
free - показать состояние памяти в байтах
free -h - показать состояние памяти в MB, GB
ps
- показать мои процессы
ps aux - показать все процессы от всех пользователей
ps aux | grep bash - найти все процессы bash

sudo - запустить команду используя Super User права
su - сменить текущего пользователя
/etc/passwd - тут хранятся все аккаунты
/etc/shadow - тут хранятся все пароли аккаунтов
/etc/group - тут хранятся все группы
whoami - показать имя текущего пользователя
id - показать к каким группам принадлежит пользователь
who - показать кто сейчас в системе
w - показать кто сейчас в системе и что делает
last - показать последние логины

useradd -m vasya - создать юзера vasya с домашней
директорией
userdel -r vasya - стереть юзера vasya с его домашней
директорией
/etc/skel - это шаблон домашней директории
passwd vasya - изменить пароль для юзера vasya
groupadd Programmers - создать группу Programmers
groupdel Programmers - стереть группу Programmers
usermod -aG Programmers vasya - добавить юзера vasya
в группу Programmers
deluser vasya Programmers - удалить юзера vasya
из группы Programmers

chown - изменить владельца файла / директории
chgrp - изменить группу файла / директории
chmod - изменить права доступа на файл / директорию
chmod ugo+x myfile.txt добавить Х всем
chmod g-rw myfile.txt убрать RWy группы
chmod o=rw myfile.txt установить RW всем остальным
u = user
g = group
o = other
a = ugo


chmod 777 myfile.txt установить RWX всем
chmod 741 myfile.txt установить:
rwx
7
4+2+1
RWX владельцу
rw-
6
4+2+0
r = 4
r-x
5
4+0+1
R - - группе
w = 2
r--
-WX
4
3
4+0+0
0+2+1
- - всем остальным
x = 1
-w-
2
0+2+0
--X
1
0+0+1
0+0+0
chmod 1777 myDir включить StickyBit
chmod 0777 myDir выключить StickyBit


ifconfig
- - показать мой IP адрес
ip addr show - показать мой IP адрес
route
- - показать адрес роутера Gateway
ping
- - протестировать коннекшн к адресу
host
вып
- - дать IP адрес веб сайта
- - дать IP адрес веб сайта
netstat - выдать сетевые подключения компьютера


wget - скачать файл из интернета
Ubuntu/Debian/Kali/Mint Linux:
apt-get install
- скачать и установить программу
apt-get remove
- удалить программу
dpkg -i
- установить программу из файла .deb
dpkg -r
- удалить программу
Red Hat/Centos Linux:
yum install
- скачать и установить программу
yum remove
- удалить программу
rpm -i
- установить программу из файла .rpm
rpm -e
- удалить программу
