МАШИНА ТЬЮРИНГА:
----------------
Концепция универсальной вычислительной машины (компьютера общего назначения).
Разработана Английским математиком Аланом Тьюринго (Отец, IT-индустрии,
разработчик дешифровальной машины "Криптографическая Бомба Тьюринга", предназначеной
для дешифровки сообщений немецкой шифровальной машины "ЭНИГМА" в годы второй мировой войны).
Это считывающее устройство, находящееся в одном из нескольких состояний,
умеющее читать ленту, изменять состояние в зависимости от прочитанного,
перемещаться по ленте (условно говоря - носитель машинного кода) вперед и назад в зависимости от состояний,
 а также выполнять записи. Число состояний, в которых может находиться машина Тьюринга, конечно и заранее определено.

Условно говоря, машина Тьюринга - это универсальный компьютер общего назначения, 
который может обрабатывать любой тип данных, любым требуемым способом, и предоставлять
результат в любом требуемом виде, в соотвествии с вводимым в него машинным кодом.

Меняя программы, мы могли бы заставить компьютер решать разные задачи.
Оставалось научить машину «принимать решения» в зависимости от того, что указывает ей
программа. И для этого необходимо собрать нужную элементную базу.

Но прежде чем перейти к элементной базе, нужно коснуться математической. Чтобы элементы могли выполнять действия, нужно определить, какие операции будут выполняться
и над какими операндами.

PS.:
Идея машины Тьюринга тесно связана с понятиями процессора, алгоритма,
языка программирования, транслятора, компилятора, интерпретатора,
виртуальной машины (машины, выполняющей байт-код).

Языки программирования называются Тьюринг-полными, если на них можно реализовать любую вычислимую функцию.

МАТЕМАТИЧЕСКАЯ БАЗА:
--------------------
Практически вся современная техника работает в двоичной системе счисления .

# Позиционные системы счисления кратные 2:
BIN — двоичная (binary): 0-1;
OCT — восьмеричная (octal): 0-7;
HEX — шестнадцатеричная (hexadecimal): 0-9, A-F;
DEC — десятичная (decimal): 0-9.

Во всех системах счисления 10 обозначает переход в новый разряд.

При обозначении чисел в двоичной системе счисления часто применяется "выравнивание":
бинарное число разбивается на группы по 4 цифры, недостающие разряды в группе заполняются
нулями, например:
десятичное 4 = 100 (бинарное) = 0100 (бинарное с выравниванием);
десятичное 16 = 10000 (бинарное) = 0001 0000 (бинарное с выравниванием).


БУЛЕВА АЛГЕБРА:
---------------
Раздел алгебры оперирующий двумя множествами (работает в двоичной системе счисления):

True  = 1    # истина (есть напряжение)
False = 0    # ложь   (нет напряжения.слабое напряжение)

Бит - элементарная единица хранения информации, которая может принимать одно из двух значений: 0 или 1.

Над двоичными числами можно выполнять те же операции, что и над десятичными: арифметические
и битовые (логические и сдвиги).

# Арифметические операции похожи на привычные нам:

  0 + 0 = 0
  0 + 1 = 1
  1 + 0 = 1
  1 + 1 = 10

# Битовые логические операции:
## Бинарные:

# Логическое умножение - конъюнкция: И (AND), также обозначается как &, а в математике ∧;
  0 AND 0 = 0
  0 AND 1 = 0
  1 AND 1 = 1

# Логическое сложение - дизъюнкция: ИЛИ (OR), также обозначается как |, а в математике ∨;
  0 OR 0 = 0
  0 OR 1 = 1

# Исключающее или: ИЛИ (XOR), также обозначается как ^, а в математике ⊕ (еще эта операция называется сложением по модулю 2):

  0 XOR 0 = 0
  0 XOR 1 = 1
  1 XOR 0 = 1
  1 XOR 1 = 0

## Унарные:

# Отрицание:
  NOT 0 = 1
  NO1 1 = 0

# Битовыек сдвиги:
Пример битового сдвига влево:
было 0000 0010 — стало 0000 0100.
Фактически это очень быстрое умножение на 2.

ЭЛЕМЕНТНАЯ БАЗА:
----------------

Математическая база у нас есть. Теперь, подавая сигналы, мы сможем добиваться операций, — если будем считать,
 что у нас есть входы и выходы на соответствующие схемотехнические элементы, которые могут принимать управляющие сигналы,
 и в зависимости от поступившего сигнала (тех же 0 или 1) выполнять операции И, ИЛИ, отрицания и более сложные, такие как складывание или сдвиги.

Данные схемотехнические элементы строятся на основе логических вентилей:
Схемы описывающие устройство и логику работы элементной базы на основывваясь на логических операцих
булевой алгебры. Разработаны Клодом Шеноном, который придумал использовать электромеханические реле в качестве элементной базы для первых ЭВМ.

У реле были недостатки: занимают много места, дорого, шумно, медленно, часто выходят из строя (механически).

После реле были - вакуумные лампы (диоды и триоды): занимают много места, потребляют много энергии, греются, часто перегорают.

Лампы заменили кремнивые транзисторы: могут быть бесконено маленькими, быстрые, практически не выходя из строя, относительно дешёвые,.

Благодаря свойствам транзисторов стало возможным сосздавать миниатюрные единые схемы в одном корпусе - микропроцессоры,
 и размещать на одной плате множество подобных устройств. 

НЕКОТОРЫЕ КОМПАНИИ ВНЕСШИЕ ЗНАЧИМЫЙ ВКЛАД В РАЗВИТИЕ ИТ:
--------------------------------------------------------

IBM:
----
  - 8 бит в байте;
  - Прообраз OC c разделяемым временем - BESYS;
  - Модульная архитектура ЭВМ;
  - Единый набор команд для всех устройств.
  
Intel:
------
  - микропроцессор;

Xerox:
------
  - GUI;
  - Ethernet;
  - mouse;
  - laser printer;
  - notebook (xerox not a tracker).

APPLE:
------
 - Первый доступный персональный компьютер;

MICROSOFT:
----------

 - Первая доступная рядовым пользователям ОС для ПК;

ПРОСТЕЙШЕЕ ОПИСАНИЕ УСТРОЙСТВА ЭВМ (ПК):
---------------------------------------

Основой современного компьютера служит "общая шина".
* ОБЩАЯ ШИНА: совокупность из нескольких десятков параллельных проводов,
называемых ДОРОЖКАМИ. Обеспечивает взаимодействие всех основных компонентов компьютера.
К ШИНЕ подключаются:
  - ЦЕНТРАЛЬНЫЙ ПРОЦЕССОР,
  - ОПЕРАТИВНОЕ ЗАПОМИНАЮЩЕЕ УСТРОЙСТВО,
  - КОНТРОЛЛЕРЫ.

Каждая дорожка может находиться в одном из двух состояний:
 - Логическая 1 - дорожка подтянута к напряжению схемы;
 - Логический 0 - дорожка соединена с землей.

Комбинация из состояний дорожек обьединенных в группу по конкретному назначению - несет полезную информацию для устройств подключенных к шине.

Все дорожки общей шины делятся на три группы:
 - ШИНА АДРЕСОВ - на ней выставляется адрес контроллера или банка памяти, откуда считать информацию, или куда записать;
 - ШИНА ДАННЫХ - по ней передается информация которую считывают или записывают;
 - ШИНА УПРАВЛЕНИЯ - на ней выставляются управляющие сигналы, передающие состояния и команды.

Через шину процессор взаимодействует с остальными компонентами компьютера.
Все устройства, кроме процессора включаются в работу, когда на шине адресов выставляется их адрес.

* ОПЕРАТИВНОЕ ЗАПОМИНАЮЩЕЕ УСТРОЙСТВО (ОЗУ, RAM - Random access memory).
Память состоит из одинаковых ячеек памяти. Каждая ячейка имеет свой уникальный адрес.
Все адреса ячеек, технически возможных на компьютере образуют АДРЕСНОЕ ПРОСТРАНСТВО (ФИЗИЧЕСКОЕ).
Размер адресного пространства равен результату возведения в степень,
где основание = 2, а показатель степени = количеству дорожек в шине адресов.
С ячейкой памяти можно выполнить всего две операции: прочесть из нее значение и записать.

Для выполнения этих операций процессор:
 - Выставляет на шине адресов адрес ячейки;
 - Выставляет на шине управления сигнал дающий указание записать данные в ячейку или считать их;
 - На шине данных выставляются значения, которые необходимо записать в ячейку, либо передаются значения из самой ячейки при чтении.

Старые значения ячеек перезаписываются. При выключении питания, информация в ячейках памяти стирается.
Процессор взаимодействует с оперативной памятью напрямую, но с остальными устройствами (устройствами ввода/вывода и хранения информации) процессор взаимодействет через контроллеры.

* Некоторые блоки памяти представляют из себя - ПОСТОЯННУЮ ПАМЯТЬ - предназначена
для длительного хранения какой-то информации - не перезаписывается. Как правило
используется для хранения кода программы (которую закладывают при изготовлении ЭВМ), которая первой загружается при включении компьютера,
 выполняет тестирование оборудования, ищет откуда можно загрузить ОС, загружает её и передает ей дальнейшее управление.

* Также, для длительного хранения какой-то информации используют ВНЕШНИЕ ЗАПОМИНАЮЩИЕ УСТРОЙСТВА (ВЗУ),такие как, например ЖЕСТКИЕ ДИСКИ (HDD).
Хранимую на ВЗУ информацию ОС организует ввиде ФАЙЛОВ - единиц информационного хранения,
имеющих доступные для пользователя имена.

* ЦЕНТРАЛЬНЫЙ ПРОЦЕССОР (микропроцессор, CPU - Central processing unit).
Представляет собой единую электронную схему. Его основное назначение - выполнять простейшие действия, заданные командами, из которых состоит программа.
В состав процессора входит сверхбыстрая оперативная память (СОЗУ), которая располагает с именованными ячейками памяти (РЕГИСТРАМИ)
- запоминающими устройствами, способными хранить от нескольких до нескольких десятков двоичных разрядов (битов).
Как правило, это данные, необходимые для обеспечения работы процессора, и промежуточные данные вычислений
(как арифметических, так и предназначенных для передачи номеров функций и аргументов при вызове программных прерываний, см. далее).
Основную работу процессор производит над информацией, хранящейся в регистрах. Работа с регистрами — наиболее быстрая.

К основным регистрам относятся:
  - регистры общего назначения (AX, BX, CX, DX) для хранения данных:

    AX (accumulator) — аккумулятор, применяется для хранения результатов
промежуточных вычислений - умножение, деление, обмен с устройствами ввода/вывода (команды ввода и вывода);
    BX (base) — базовый регистр в вычислениях адреса, часто указывает на начальный адрес (называемый базой) структуры в памяти;
    CX (count) — счетчик циклов, определяет количество повторов некоторой операции;
    DX (data) — определение адреса ввода/вывода, так же может содержать данные, передаваемые для обработки в подпрограммы(промежуточных вычислений);

  - Индексные (SI, DI), сегментные CS, DS, SS, ES) и регистры-указатели (SP, BP) - хранят адреса ячеек с кодом и данными:

    SP (Stack Pointer) — всегда указывает на вершину стека, позволяет временно хранить адреса и иногда данные;
    BP (Base Pointer) — указатель базы кадра стека (stack frame), предназначен
для организации произвольного доступа к данным внутри стека;
    SI (Source Index) — указатель базы кадра стека (stack frame), предназначень для организации произвольного доступа к данным внутри стека
(обычно связан с регистром DS);
    DI (Destination Index) — индекс приемника, в цепочечных операциях содержит указатель на текущий элемент-приемник и применяется также для строковых операций
(обычно связан с регистром ES).
    CS: Code segment — содержит текущий сегмент кода. Процессор может загружать инструкции
только из указанного в CS сегмента. Регистр CS используется процессором в связке CS:IP. Не
может меняться непосредственно, командой MOV. Тем не менее процессорные команды
вызовов и переходов (JMP, CALL, RET) фактически могут изменять этот регистр;
    DS: Data segment — содержит текущий сегмент данных. Может использоваться в комбинации
DS:BX, DS:SI, DS:DI (в формате сегмент:смещение) для манипуляции с данными;
    SS: Stack segment — содержит текущий сегмент стека. Фактически регистры SP и BP
указывают смещение относительно сегмента, заданного в SS (то есть работа идет с памятью в
SS:SP и SS:BP);
    ES: Extra segment — дополнительный сегмент, часто используется неявно в строковых
командах как сегмент-получатель (работа идет с ES:DI);
    FS: F segment — дополнительный сегментный регистр без специального назначения;
    GS: G segment — дополнительный сегментный регистр без специального назначения.

  - Флагов (FLAGS) - состояние процессора (статус выполнения команд) после каждого такта.
    Некоторые значимые флаги:
      - ZF: zero flag — флаг нуля:
          1 — результат последней операции нулевой;
          0 — результат последней операции ненулевой.
      - IF: interrupt flag — флаг прерываний:
          1 — в этом случае процессор обрабатывает внешние (аппаратные прерывания);
          0 — в этом случае процессор игнорирует внешние прерывания (кроме NMI).
      - CF: carry flag — флаг переноса:
          1 — во время арифметической операции был произведен перенос из старшего бита результата;
          0 — переноса не было.
      - OF: overflow flag — флаг переполнения:
          1 — во время арифметической операции произошел перенос в / из старшего (знакового)  бита результата;
          0 — переноса не было.
      - DF: direction flag — флаг направления. Указывает направление просмотра в строковых операциях:
          1 — направление «назад», от старших адресов к младшим;
          0 — направление «вперед», от младших адресов к старшим;

  - Указатель команд (IP - instruction point) - хранит адрес следующей ячейки с кодом для выполнения. Вручную изменить нельзя.
    Выполнение каждой команды либо изменяет этот регистр на размерность команды, либо меняет на указанный адрес.

Работа процессора (как и другого электронного оборудования) обеспечивается ТАКТОВЫМ ГЕНЕРАТОРОМ.
Тактовый генератор – это микросхема, вырабатывающая через равные промежутки времени электрические сигналы,
которые используются для приведения в действие всех устройств компьютерной системы.
Тактовый генератор задает собственную частоту материнской платы, а также, через множители или делители, частоты устройств,
работающих быстрее (например, процессора) или медленнее материнской платы.
Тактовая частота, количество тактов генерируемых для устройства в единицу времени.

В число операций, которые может выполнять процессор, обязательно входят чтение и запись ячеек памяти,
при которых информация передаётся через шину из оперативной памяти в процессор или обратно.

За один такт процессор может выполнить только одну операцию чтения или записи.
Максимальное размер числа, которое может обработать процессор за один такт называется размером машинного слова, в битах.
Размер машинного слова определяется разрядностью процессора.
 
Разрядность процессора:
-----------------------
Определяется разрядностью его основных ячеек (памяти) - регистров.
Определяется основанием (количеством возможных значений) одного разряда (ячейки памяти),
возведенным в степень равную количеству разрядов (ячеек).
Примеры:
  - в замке 3 ячейки, каждая по 10 значений от 0 до 9. Разрядность = 3 (в десятичной с.сч.).
    количество комбинаций = 10 в степени 3 = 1000, максимальное значение = 999;
  - В четырех-битном процессоре - 4 ячейки памяти, каждая по 2 значения (0-1, двоичная система счисления).
    Разрядность = 4 бита, количество комбинаций = 16, максимальное значение = 15 (1111).

Процессоры соблюдают обратную совместимость - каждый основной регистр содержит в себе регистры меньшего разряда.

Если число (адрес ячейки, набор данных или управляющий код) передаваемое процессору/процессором больше чем он может обработать за один такт
- для его обработки используется больше ячеек процессора и больше тактов. Для этого число разбивается на несколько частей, каждая из которых
не должна превышать допустимый размер машинного слова. При передаче таких чисел становится важным порядок передаваемых байтов.

Порядок байтов:
---------------
Порядок бит в байте - всегда одинаков - младший всегда с права.
А вот порядок байт при передаче больших чисел может различаться.

Существует как минимум два способа хранения и передачи байтов, которые могут различаться в
разных реализациях процессоров: big-endian и little-endian.

Порядок байт это - положение старшего байта относительно младшего при переносе разряда, если адресуемое значение не умещается в один байт.

В 1 байте 8 бит;
Порядок бит в байте всегда одинаков - старший бит слева: <--

Big-Endian (TCP/IP)   - старший байт слева:  256 = 1 + 255 = 00000001 11111111;
Little-Endian (intel) - старший байт справа: 256 = 255 + 1 = 11111111 00000001.


Среди операций, выполняемых центральным процессором, всегда присутствует арифметика
 - как минимум сложение и вычитание, хотя на всех современных процессорах есть также умножение и деление.
Каждое элементарное действие, выполняемое центральным процессором (машинная команда), обозначается кодом операции (МАШИННЫМ КОДОМ).
Программа, состоящая из таких кодов, располагается в ячейках памяти.
Один из регистров процессора, который называется счётчик команд или указатель инструкции (IP - instruction point),
содержит адрес той ячейки памяти, в которой располагается следующая инструкция, предназначенная к выполнению.
Процессор работает, раз за разом выполняя цикл обработки команд.
В начале этого цикла берётся адрес из счётчика команд, и из ячеек памяти, расположенных по этому адресу, считывается код очередной команды.
Сразу после этого счётчик команд меняет своё значение так, чтобы указывать на следующую команду в памяти.
Например, если только что прочитанная команда занимала три ячейки памяти, то счётчик команд увеличивается на три.
Схемы процессора дешифруют код и выполняют действия, предписанные этим кодом.
Когда действия, предписанные командой, будут исполнены, процессор возвращается к началу цикла обработки команд,
так что следующий проход этого цикла выполняет уже следующую команду, и так далее пока процессор не обесточат.

Некоторые машинные команды могут изменить последовательность выполнения команд, предписав процессору перейти в другое место программы
(то есть, попросту говоря, в явном виде изменить текущее значение счетчикака команд). Такие команды называются командами перехода.
Различают условные и безусловные переходы.
Команда условного перехода сначала проверяет истинность некоторого условия и производит переход только если условие выполнено,
тогда как команда безусловного перехода просто заставляет процессор продолжить выполнение команд с заданного адреса без всяких проверок.
Процессоры обычно поддерживают также переходы с запомиганием точки возврата, которые используются для вызова подпрограмм.

Важным механизмом реагирования процессора на различные события (обеспечивающем, в том числе, многозадачность), являются - ПРЕРЫВАНИЯ.

Прерывания:
-----------
Необходимы для обработки процессором различных событий.
Прерывание - Функция, которая вызвается по ее номеру в случае наступления какого-либо события.
             В ответ на событие, по номеру прерывания вызывается обработчик прерывания
             (его адрес определяется в таблице векторов прерываний, котороая реализуется на уровне ОС),
             который "реагирует" на событие определенным действием.
Бывают:
  - Аппаратные - исходят от оборудования;
  - Немаскируемые - некоторые прерывания (например исключения) невозможно отключить в программном коде;
  - breakpoint - пауза в выполнении программы для дебагинга;
  - исключения - срабатывают в случае возникновения недопустимых событий, например деление на 0;
  - Программыне - user space - прерывания, которые инициируются исполнением специальной инструкции в коде программы;
  - Системные  - kernel space - обращение прикладной программы к ядру операционной системы для выполнения какой-либо операции.

* Подключение внешних устройств к общей шине производится через КОНТРОЛЛЕР
- электронную схему, которая может взаимодействовать через шину с центральным процессором.
Все контроллеры делают это одинаково, внезависимости от того, какими устройствами они управляют,
то есть с точки зрения процессора все контроллеры оказываются «на одно лицо».
При этом, «другим концом» каждый контроллер подключается непосредственно к своему внешнему устройству и управляет его работой.

Как правило контроллеры имеют отдельное пространство адресов
(Однако на некоторых архитектурах ячейки памяти и контроллеры находятся в одном общем пространстве адресов и оказываются взаимозаменяемы,
то есть центральный процессор «не знает», с чем он имеет дело - с настоящей памятью или с контроллером).
В этом случае говорят об адресах портов ввода-вывода.
Один контроллер может поддерживать один или больше таких «портов», то есть при работе с шиной отзываться на несколько разных адресов.
Взаимодействие центрального процессора с контроллером строится на уже знакомых нам операциях чтения и записи.
Операции чтения из порта ввода-вывода и записи в такой порт с точки зрения центрального процессора выглядят совершенно так же,
как и операции чтения-записи ячеек памяти, но контроллеры, в отличие от ячеек памяти, присланные им в ходе «записи» значения не запоминают,
а воспринимают их как предписания что-то сделать.
В ходе «чтения» порта контроллеры выдают не какое-то заранее сохранённое значение, а такое значение, которое как-то связано с состоянием
самого контроллера, то есть позволяет узнать, например, завершена ли очередкая операция, готов ли контроллер к выполнению следующей операции,
не обнаружены ли какие-либо неисправности и т. п.

Сколько портов поддерживает конкретный контроллер, какие ему можно отдавать предписания и каковы коды этих предписаний,
что означают значения, которые прочитываются из его портов - всего этого центральный процессор не знает,
потому что всё это зависит от конкретного контроллера, а для другого контроллера всё может быть совсем не так.
Для работы с каждым конкретным контроллером нужна специальная программа, которая называется ДРАЙВЕРОМ.
Обычно драйвер является частью операционной системы или становится такой частью после его
загрузки. Выполняясь на центральном процессоре, программа-драйвер даёт команды записи и чтения портов ввода-вывода «своего» контроллера,
решая поставленные ей задачи.
Например, если пользователь запустил некую программу, а этой программе потребовалась запись в файл на диске,
то для этого программа обратится к операционной системе (с помощью API cистемных вызовов) с просьбой записать такие-то данные в такой-то файл,
операционная система вычислит, в каком месте диска находится или должен находиться соответствующий файл, и, обратившись, в свою
очередь, к драйверу (то есть фактически к своей обособленной части), потребует записать определённые данные в определённое место диска.
После этого драйвер, вооружась имеющимся у него знанием возможностей контроллера диска, сначала выполнит несколько операций записи в порты ввода-вывода,
что заставит контроллер начать операцию записи, а затем, выполнив операции чтения из портов,
узнает о результатах операции и сообщит о них операционной системе.

Иерархия запоминающих устройств:
--------------------------------
Информация в вычислительной системе может запоминаться и храниться устройствами различного типа в зависимости от того,
насколько оперативным должен быть доступ к данной информации,
насколько долговременным должно быть её хранение и каков её объём.

Наиболее оперативно доступна информация в регистрах центрального процессора.
Однако объём регистровой памяти задаётся раз и навсегда при проектировании процессора и
увеличен быть не может. Этот объём ограничен, т. к. каждый новый регистр ЦП увеличивает сложность схемы ЦП,
требует введения дополнительных инструкций и в целом может существенно повысить стоимость процессора.

Кеш-память предназначена для увеличения скорости доступа к данным,находящимся в оперативной памяти.
В кеш-памяти дублируются данные из оперативной памяти, наиболее часто используемые выполняющейся программой.
Важно понимать, что эти данные представляют собой именно копию данных, хранимых в основной памяти, а не что-то иное.
Скорость доступа к кешу существенно выше, чем к оперативной памяти, поскольку для взаимодействия процессора с кешем не нужно задействовать шину
- а шина как раз работает довольно медленно из-за её сравнительно большой длины, причём её работа не может быть существенно ускорена,
так как ограничена скоростью света и другими физическими причинами.
При этом сам кеш имеет достаточно сложное устройство, а объём его сравнительно невелик.
Кеш обычно имеет несколько уровней, в современных условиях типична четырёхуровневая схема.
Каждый последующий уровень находится в каком-то смысле «дальше» от вычислительных схем процессора,
за счёт чего обладает меньшей скоростью доступа, но зато имеет больший объём.
Обычно все уровни кеша, кроме последнего, физически реализуются в одной микросхеме с процессором,
последний же представляет собой отдельную схему, расположенную рядом с процессором (между ним и шиной).

Оперативная память представляет собой основное хранилище выполняемых программ и данных, нужных для их работы.
Объём оперативной памяти может быть сравнительно большим, а её стоимость в последние годы снизилась. 
Тем не менее, её объема может не хватить. Кроме того, содержимое оперативной памяти,
кеша и регистров теряется с выключением компьютера, так что для долговременного хранения данных эти виды запоминающих устройств непригодны.

На следующем уровне иерархии находятся магнитные диски или, говоря в общем, устройства долговременного хранения,
позволяющие производать доступ к данным в произвольном порядке.
Кроме собственно магнитных дисков, к устройствам такого класса относятся, например, накопители на flash-картах.
Ныне вышедшие из употребления магнитные барабаны также относились к этому классу.
Объём таких устройств может быть на порядки больше, чем объём ОЗУ, а стоимость - существенно ниже.
Кроме того, сохранённая на дисках информация не теряется при выключении питания и может храниться долгое время.
С другой стороны, для доступа к дискам требуются медленные (в сравнении со скоростью процессора и ОЗУ) операции ввода-вывода.
Более того, процессор не в состоянии непосредственно обращаться к дискам, так что вся информация, с которой он будет рабо-
тать - и код программ, и данные для них - должны быть предварительно скопированы в оперативную память.

Как уже говорилось, именно на дисках располагаются хорошо знакомые каждому пользователю компьютеров файлы.
Срок хранения информации на дисках может составлять годы, но он всё же ограничен.
Для архивных нужд применяют накопители на магнитных лентах (стримеры).
Ленты представляют собой самый надёжный, долговременный и дешёвый (в пересчёте на единицу объёма) способ хранения данных.
Недостаток лент состоит в невозможности доступа к блокам данных в произвольном порядке.
Как правило, данные с лент перед использованием копируют на диски.

В последние годы с ростом объёмов жёстких дисков ленты стали использоваться сравнительно редко,
сейчас стримеры можно встретить только в организациях, имеющих дело с большими архивами данных.
Современная кассета для стримера может хранить несколько терабайт данных.
Сам стример, то есть устройство для работы с такими кассетами, стоит намного дороже обычного жёсткого диска аналогичной ёмкости,
но кассеты для него сравнительно дёшевы.
При использовании большого числа кассет удельная стоимость хранения (то есть общая стоимость хранения, поделенная на объём хранимой информации)
может быть ниже в десятки раз в сравнении с использованием жёстких дисков.
Кроме того, ленты при соблюдении условий хранения оказываются намного долговечнее жёстких дисков.

МАШИННЫЙ КОД:
-------------
МАШИННЫЙ КОД - это, условно говоря, "текст" содержащий код программы (или набор данных), представленный в виде сплошного
(неразрывного, без отступов и знаков препингания) потока нулей и единиц (т.е - бинарного). Фактически - любой набор команд и данных,
кодируется (представляется) в виде двоичного кода. Именно с такой последовательностю нулей и единиц работает процессор, только её он понимает.

Команды здесь - не имеют названий, они представлены в виде двоичных номеров.
Программирование в машинном (двоичном) коде не удобно человеку, поэтому, вместо двоичного кода для программирования стали использовать системы счисления
кратные двум: вначале, восьмеричную (OCTAL), а позже шестнадцатиричную (HEX).

Удобство HEX заключается в том, что количество символов используемых для кодирования одного и того же объёма информации в 4 раза меньше
чем при кодировании в двоичной системе счисления. Запоминать номера часто используемых команд в HEX намного проще.

Далее стали использовать МНЕМОНИКИ - часть команд, вмместо их номеров стали обозначать короткими словами, например:
 - MOVE - поместить значение в ячейку;
 - INT  - вызвать прерывание;
 - LOOP - счетчик циклов;
 - INC  - счетчик команд (инкремент).

Далее, на основе HEX и мнемоник был разработан низкоуровневый язык программирования -  ASSEMBLER
- который позволял писать программы использующие директивы процессора.

* ASSEMBLER подходит для написания кода работающего напрямую с оборудованием.
Соответственно, он привязан к архитектуре процессора, и программист может использовать в коде только те
системные вызовы и функции, которые доступны конкретному процессору.

Существуют два способа записи кода в assembler:

 - INTEL-запись.
Регистры в ней называются AX, BX и т.д.,
порядок операндов следующий: КОМАНДА приемник, источник.
На то, что берётся не значение регистра, а значение из адреса памяти в регистре,
в записи указывается квадратными скобками. Например: MOV AX, [BX]
Числа в ассемблере записываются в виде 10h.
В качестве символа комментария используется «;»

 - AT&T-запись
В Unix и Linux применяется AT&T-синтаксис, и это не случайно, так как UNIX-подобные системы
зародились в недрах AT&T.
Регистры в данном типе синтаксиса именуются следующим образом: %eax, %ebx.
Значение с префиксом $xx означает число xx.
Запись xx без префикса означает использование ячейки с адресом xx (в Intel-нотации это было бы [xx]).
К мнемоникам добавляются префиксы: b – byte, w – word, l – long (например: movb, movw).
Запись имеет вид КОМАНДА префикс источник, приемник – например: movl %ebx, %eax (в противовес
MOV EAX, EBX в Intel-нотации).
Шестнадцатеричные числа имеют вид $0x00.
Если работа идёт с ячейкой памяти, адрес которой содержится в регистре, регистр берётся в круглые,
а не квадратные скобки – например: movw (%bx), %ax.
В качестве символа комментария используется #, а ; служит для разделения нескольких команд.

Простейшие команды:
 - mov – поместить в регистр или память значение (либо записанное константой, либо взятое из
другого регистра или из памяти);
 - int – вызвать программное прерывание: указывается номер прерывания (эта команда похожа
на вызов функции, аргументы передаются в регистрах и в них же возвращаются);
 - call – вызвать функцию (подпрограмму): указывается адрес команды, на которую передаётся
управление;
 - retn – вернуться из функции (подпрограммы);
 - nop – ничего не сделать (заполнитель).

КОМПИЛЯЦИЯ - процесс перевода кода программы в машинный код из более высокого уровня.
ДЕКОМПЕЛЯЦИЯ - перевод машинного кода в более высокий уровень. Например:
ДИЗАССЕМБЛИРОВАНИЕ - перевод бинарного кода в код мнемоник или assembler.
  Как правило выполняется с помощью специальных программ, например в Windows это - Hiew,
  а для GNU\Linux - biew (в качестве $1 принимает путь к исходному файлу),
  может запускаться с ключем -b (преобразует машинный код в мнемоники),
  или с ключем -h (преобразует в HEX).

 
* Си – язык, занимающий промежуточное положение между языками высокого и низкого уровня.
Несмотря на более привычные записи арифметических операций и алгоритмических конструкций,
нежели в Ассемблере, Си – язык довольно низкоуровневый, требующий аккуратной работы с памятью
и переменными. Ошибка при написании программы в Си может приводить к неверному завершению
программы (например, наиболее частая ошибка – Segmentation fault – влечёт за собой попытку
обращения к не своей памяти), а для ядра или модуля ядра – к Kernel panic.

Ассемблер и Си – два языка, используемые для программирования не только программ и
компонентов операционной системы, но и микроконтроллеров. При этом в работе с
микроконтроллерами, как правило, необходимо ознакомиться с Data sheet на соответствующее
устройство и, даже программируя на Си, напрямую работать с портами ввода-вывода, памятью и т.д.

Форматы исполняемых файлов:
---------------------------
Исполняемый файл хранится на диске.

.СОМ – простейший формат исполняемого файла, применяемый в операционных системах CP/M и
DOS.

MZ и другие .exe
Данный формат использовался и используется в ОС OS/2, MS DOS, Windows и имеет расширение
.exe. Для него существует несколько стандартов (MZ, NE, LE, PE и т.д.) Файл содержит несколько
заголовков, первый из которых (за исключением формата MZ) – заглушка в формате MZ, выводящая в
консоль сообщение, что программа не может быть исполнена в DOS.

.ELF
Этот формат, популярный в Linux и некоторых других системах, был также разработан на смену a.out.
Может представлять из себя набор инструкции и данные, которые могут быть связаны с
другими объектными файлами, либо исполняемый файл.





